{"ast":null,"code":"import _objectSpread from\"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{actions,assign}from\"xstate\";import\"./styles.scss\";const send=actions.send,cancel=actions.cancel;function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Mary\":{person:\"Mary Curie\"},\"George\":{person:\"George Smith\"},\"Axel\":{person:\"Axel Rose\"},\"Sebastian\":{person:\"Sebastian Bach\"},\"on Monday\":{day:\"Monday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Friday\":{day:\"Friday\"},\"on Saturday\":{day:\"Saturday\"},\"on Sunday\":{day:\"Sunday\"},\"at 5\":{time:\"5:00\"},\"at 6\":{time:\"6:00\"},\"at 7\":{time:\"7:00\"},\"at 8\":{time:\"8:00\"},\"at 9\":{time:\"9:00\"},\"at 10\":{time:\"10:00\"},\"at 11\":{time:\"11:00\"},\"at 12\":{time:\"12:00\"}};const grammar2={\"yes of course\":true,\"sure\":true,\"absolutely\":true,\"yes\":true,\"no way\":false,\"no\":false};let a=grammar2[\"yes\"];let b=grammar2[\"no\"];let count=0;const commands={\"stop\":\"S\",\"help\":\"S\"};function promptAndAsk1(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')}}};}function promptAndAsk(prompt,nomatch,help){return{initial:'prompt',states:{prompt:{entry:prompt,on:{ENDSPEECH:'ask'}},ask:{entry:[send('LISTEN'),send('MAXSPEECH',{delay:4000,id:'timeout'})]},nomatch:{entry:say(nomatch),on:{ENDSPEECH:\"prompt\"}},help:{entry:say(help),on:{ENDSPEECH:'ask'}}}};}export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:_objectSpread({on:{RECOGNISED:{target:\"query\",actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk1(\"What would you like to do? Your options are appointment, to do item or timer\")),query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.option),onDone:{target:'menu',actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]},onError:{target:'welcome',actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:'todo',cond:context=>context.option==='todo'},{target:'timer',cond:context=>context.option==='timer'},{target:'appointment',cond:context=>context.option==='appointment'}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I understand.\"}))}}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a to do item\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a timer\"}))}}},maxspeech:{entry:say(\"Sorry I couldn't hear anything\"),on:{'ENDSPEECH':'mainappointment.hist'}},finalmaxspeech:{entry:say(\"It appears you are not there anymore. Goodbye.\"),on:{'ENDSPEECH':'init'}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"mainappointment\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},mainappointment:{initial:'who',on:{MAXSPEECH:[{cond:context=>context.counter==3,target:'finalmaxspeech'},{target:'maxspeech',actions:assign(context=>{count++;return{counter:count};})}]},states:{hist:{type:'history',history:'shallow'},who:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{cond:context=>context.recResult in commands,target:\".help\"},{target:\".nomatch\"}]}},promptAndAsk(say(\"Who are you meeting with?\"),\"Sorry, I don't know them\",\"You need to tell me which person you will be meeting so that I can set the appointment\")),day:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>'day'in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:'wholeday'},{cond:context=>context.recResult in commands,target:\".help\"},{target:\".nomatch\"}]}},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"OK \".concat(context.person,\". On which day is your meeting?\")})),\"Sorry, could you repeat that?\",\"I am asking what day your meeting will take place so that I can put it on your calendar\")),wholeday:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"time\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmwholeday\"},{cond:context=>context.recResult in commands,target:\".help\"},{target:\".nomatch\"}]}},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"OK \".concat(context.day,\". Will your meeting take the whole day?\")})),\"Sorry, could you repeat that?\",\"I am asking whether your meeting will take the whole day so that I clear your schedule\")),time:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"confirmtime\"},{cond:context=>context.recResult in commands,target:\".help\"},{target:\".nomatch\"}]}},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"OK \".concat(context.day,\". What time is your meeting?\")})),\"Sorry, could you repeat that?\",\"I am asking what time you would like to schedule your meeting\")),confirmwholeday:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"who\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{cond:context=>context.recResult in commands,target:\".help\"},{target:\".nomatch\"}]}},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"OK. Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})),\"Sorry, could you repeat that?\",\"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),confirmtime:_objectSpread({initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"who\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{cond:context=>context.recResult in commands,target:\".help\"},{target:\".nomatch\"}]}},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"OK. Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),\"Sorry, could you repeat that?\",\"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),confirmed:{initial:\"prompt\",states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Your appointment has been created!\"}))}}}}//states 2 closes\n}//MainAppointment closes   \n}};/* RASA API\n *  */const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://irenetsk.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointmentPlus2.ts"],"names":["actions","assign","send","cancel","say","text","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","count","commands","promptAndAsk1","prompt","initial","states","entry","on","ENDSPEECH","ask","promptAndAsk","nomatch","help","delay","id","dmMachine","init","CLICK","welcome","RECOGNISED","target","context","option","recResult","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","maxspeech","finalmaxspeech","appointment","mainappointment","MAXSPEECH","counter","hist","history","who","wholeday","confirmwholeday","confirmtime","confirmed","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"qKAAA,OAAyCA,OAAzC,CAAkDC,MAAlD,KAAgE,QAAhE,CACA,MAAO,eAAP,C,KAKQC,CAAAA,I,CAAiBF,O,CAAjBE,I,CAAMC,M,CAAWH,O,CAAXG,M,CAEd,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAyD,CACrD,MAAOH,CAAAA,IAAI,CAAEI,QAAD,GAA2B,CAAEC,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEH,IAAxB,CAA3B,CAAD,CAAX,CACH,CAED,QAASI,CAAAA,MAAT,EAAgD,CAC5C,MAAOP,CAAAA,IAAI,CAAC,QAAD,CAAX,CACH,CAED,KAAMQ,CAAAA,OACL,CAAG,CACA,OAAQ,CAAEC,MAAM,CAAE,gBAAV,CADR,CAEA,OAAQ,CAAEA,MAAM,CAAE,YAAV,CAFR,CAGA,SAAU,CAAEA,MAAM,CAAE,cAAV,CAHV,CAIA,OAAQ,CAAEA,MAAM,CAAE,WAAV,CAJR,CAKA,YAAa,CAAEA,MAAM,CAAE,gBAAV,CALb,CAOA,YAAa,CAAEC,GAAG,CAAE,QAAP,CAPb,CAQA,aAAc,CAAEA,GAAG,CAAE,SAAP,CARd,CASA,eAAgB,CAAEA,GAAG,CAAE,WAAP,CAThB,CAUA,cAAe,CAAEA,GAAG,CAAE,UAAP,CAVf,CAWA,YAAa,CAAEA,GAAG,CAAE,QAAP,CAXb,CAYA,cAAe,CAAEA,GAAG,CAAE,UAAP,CAZf,CAaA,YAAa,CAAEA,GAAG,CAAE,QAAP,CAbb,CAeA,OAAQ,CAAEC,IAAI,CAAE,MAAR,CAfR,CAgBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAhBR,CAiBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAjBR,CAkBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAlBR,CAmBA,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAnBR,CAoBA,QAAS,CAAEA,IAAI,CAAE,OAAR,CApBT,CAqBA,QAAS,CAAEA,IAAI,CAAE,OAAR,CArBT,CAsBA,QAAS,CAAEA,IAAI,CAAE,OAAR,CAtBT,CADJ,CA0BA,KAAMC,CAAAA,QAAsC,CAAG,CAC3C,gBAAiB,IAD0B,CAE3C,OAAQ,IAFmC,CAG3C,aAAc,IAH6B,CAI3C,MAAO,IAJoC,CAK3C,SAAU,KALiC,CAM3C,KAAM,KANqC,CAA/C,CASA,GAAIC,CAAAA,CAAC,CAAGD,QAAQ,CAAC,KAAD,CAAhB,CACA,GAAIE,CAAAA,CAAC,CAAGF,QAAQ,CAAC,IAAD,CAAhB,CACA,GAAIG,CAAAA,KAAK,CAAG,CAAZ,CACA,KAAMC,CAAAA,QAAQ,CAAG,CAAE,OAAO,GAAT,CAAc,OAAO,GAArB,CAAjB,CAEA,QAASC,CAAAA,aAAT,CAAuBC,MAAvB,CAAiF,CAC7E,MAAQ,CACJC,OAAO,CAAE,QADL,CAEJC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEnB,GAAG,CAACgB,MAAD,CADN,CAEJI,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJC,GAAG,CAAE,CACDH,KAAK,CAAErB,IAAI,CAAC,QAAD,CADV,CALD,CAFJ,CAAR,CAWH,CAED,QAASyB,CAAAA,YAAT,CAAsBP,MAAtB,CAA4DQ,OAA5D,CAA6EC,IAA7E,CAAqI,CACjI,MAAQ,CACJR,OAAO,CAAE,QADL,CAEJC,MAAM,CAAC,CACHF,MAAM,CAAE,CACJG,KAAK,CAAEH,MADH,CAEJI,EAAE,CAAE,CAACC,SAAS,CAAE,KAAZ,CAFA,CADL,CAKHC,GAAG,CAAE,CACDH,KAAK,CAAE,CAACrB,IAAI,CAAC,QAAD,CAAL,CAAiBA,IAAI,CAAC,WAAD,CAAc,CAAC4B,KAAK,CAAE,IAAR,CAAcC,EAAE,CAAE,SAAlB,CAAd,CAArB,CADN,CALF,CAQHH,OAAO,CAAE,CACLL,KAAK,CAAEnB,GAAG,CAACwB,OAAD,CADL,CAELJ,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFC,CARN,CAYHI,IAAI,CAAE,CACFN,KAAK,CAAEnB,GAAG,CAACyB,IAAD,CADR,CAEFL,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFF,CAZH,CAFH,CAAR,CAkBQ,CAGZ,MAAO,MAAMO,CAAAA,SAAmD,CAAI,CAChEX,OAAO,CAAE,MADuD,CAEhEC,MAAM,CAAE,CACJW,IAAI,CAAE,CACFT,EAAE,CAAE,CACAU,KAAK,CAAE,SADP,CADF,CADF,CAOJC,OAAO,gBACHX,EAAE,CAAE,CACAY,UAAU,CAAE,CACRC,MAAM,CAAE,OADA,CAERrC,OAAO,CAAEC,MAAM,CAAEqC,OAAD,EAAa,CAAE,MAAO,CAAEC,MAAM,CAAED,OAAO,CAACE,SAAlB,CAAP,CAAsC,CAAtD,CAFP,CADZ,CADD,EAOQrB,aAAa,CAAC,8EAAD,CAPrB,CAPH,CAiBJsB,KAAK,CAAE,CACHC,MAAM,CAAE,CACJX,EAAE,CAAE,MADA,CAEJY,GAAG,CAAE,CAACL,OAAD,CAAUM,KAAV,GAAoBC,UAAU,CAACP,OAAO,CAACC,MAAT,CAF/B,CAGJO,MAAM,CAAE,CACJT,MAAM,CAAE,MADJ,CAEJrC,OAAO,CAAE,CAACC,MAAM,CAAC,CAACqC,OAAD,CAAUM,KAAV,GAAoB,CAAE,MAAQ,CAACL,MAAM,CAAEK,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAkBC,IAA3B,CAAR,CAA0C,CAAjE,CAAP,CACT,CAACX,OAAD,CAAsBM,KAAtB,GAAqCM,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACG,IAAlB,CAD5B,CAFL,CAHJ,CAQJK,OAAO,CAAE,CACLf,MAAM,CAAE,SADH,CAELrC,OAAO,CAAE,CAACsC,OAAD,CAAUM,KAAV,GAAoBM,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACG,IAAlB,CAFxB,CARL,CADL,CAjBH,CAiCJM,IAAI,CAAE,CACFhC,OAAO,CAAE,QADP,CAEFG,EAAE,CAAE,CACAC,SAAS,CAAE,CACP,CAAEY,MAAM,CAAE,MAAV,CAAkBiB,IAAI,CAAGhB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,MAAxD,CADO,CAEP,CAAEF,MAAM,CAAE,OAAV,CAAmBiB,IAAI,CAAGhB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,OAAzD,CAFO,CAGP,CAAEF,MAAM,CAAE,aAAV,CAAyBiB,IAAI,CAAGhB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,aAA/D,CAHO,CADX,CAFF,CASFjB,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAErB,IAAI,CAAEoC,OAAD,GAAc,CACtB/B,IAAI,CAAE,OADgB,CAEtBC,KAAK,oBAFiB,CAAd,CAAD,CADP,CADJ,CATN,CAjCF,CAoDJ+C,IAAI,CAAE,CACFlC,OAAO,CAAE,QADP,CAEFG,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFF,CAGFH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAErB,IAAI,CAAEoC,OAAD,GAAc,CACtB/B,IAAI,CAAE,OADgB,CAEtBC,KAAK,4BAFiB,CAAd,CAAD,CADP,CADJ,CAHN,CApDF,CAgEJgD,KAAK,CAAE,CACHnC,OAAO,CAAE,QADN,CAEHG,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFD,CAGHH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAErB,IAAI,CAAEoC,OAAD,GAAc,CACtB/B,IAAI,CAAE,OADgB,CAEtBC,KAAK,uBAFiB,CAAd,CAAD,CADP,CADJ,CAHL,CAhEH,CA4EJiD,SAAS,CAAG,CACRlC,KAAK,CAAEnB,GAAG,CAAC,gCAAD,CADF,CAERoB,EAAE,CAAE,CAAC,YAAa,sBAAd,CAFI,CA5ER,CAiFJkC,cAAc,CAAE,CACZnC,KAAK,CAAEnB,GAAG,CAAC,gDAAD,CADE,CAEZoB,EAAE,CAAE,CAAC,YAAa,MAAd,CAFQ,CAjFZ,CAsFJmC,WAAW,CAAE,CACTtC,OAAO,CAAE,QADA,CAETG,EAAE,CAAE,CAAEC,SAAS,CAAE,iBAAb,CAFK,CAGTH,MAAM,CAAE,CACJF,MAAM,CAAE,CAAEG,KAAK,CAAEnB,GAAG,CAAC,6BAAD,CAAZ,CADJ,CAHC,CAtFT,CA8FJwD,eAAe,CAAE,CACbvC,OAAO,CAAE,KADI,CAEbG,EAAE,CAAE,CACAqC,SAAS,CAAE,CACP,CAACP,IAAI,CAAGhB,OAAD,EAAaA,OAAO,CAACwB,OAAR,EAAmB,CAAvC,CAA0CzB,MAAM,CAAE,gBAAlD,CADO,CAEP,CAACA,MAAM,CAAE,WAAT,CAAsBrC,OAAO,CAAEC,MAAM,CAAEqC,OAAD,EAAa,CAAErB,KAAK,GAAI,MAAO,CAAE6C,OAAO,CAAE7C,KAAX,CAAP,CAA2B,CAApD,CAArC,CAFO,CADX,CAFS,CASbK,MAAM,CAAE,CACJyC,IAAI,CAAE,CAAExD,IAAI,CAAE,SAAR,CAAmByD,OAAO,CAAE,SAA5B,CADF,CAGJC,GAAG,gBACC5C,OAAO,CAAE,QADV,CAECG,EAAE,CAAE,CACAY,UAAU,CAAE,CACR,CAAEkB,IAAI,CAAGhB,OAAD,EAAa,WAAa5B,OAAO,CAAC4B,OAAO,CAACE,SAAT,CAAP,EAA8B,EAA3C,CAArB,CACAxC,OAAO,CAAEC,MAAM,CAAEqC,OAAD,EAAa,CAAE,MAAO,CAAE3B,MAAM,CAAED,OAAO,CAAC4B,OAAO,CAACE,SAAT,CAAP,CAA2B7B,MAArC,CAAP,CAAsD,CAAtE,CADf,CAEA0B,MAAM,CAAE,KAFR,CADQ,CAIR,CAAEiB,IAAI,CAAGhB,OAAD,EAAcA,OAAO,CAACE,SAAR,GAAqBtB,CAAAA,QAA3C,CACAmB,MAAM,CAAE,OADR,CAJQ,CAMR,CAAEA,MAAM,CAAE,UAAV,CANQ,CADZ,CAFL,EAYAV,YAAY,CAAEvB,GAAG,CAAE,2BAAF,CAAL,CAAqC,0BAArC,CAAiE,wFAAjE,CAZZ,CAHC,CAkBJQ,GAAG,gBACCS,OAAO,CAAE,QADV,CAECG,EAAE,CAAE,CACAY,UAAU,CAAE,CACR,CAAEkB,IAAI,CAAGhB,OAAD,EAAa,QAAU5B,OAAO,CAAC4B,OAAO,CAACE,SAAT,CAAP,EAA8B,EAAxC,CAArB,CACAxC,OAAO,CAAEC,MAAM,CAAEqC,OAAD,EAAa,CAAE,MAAO,CAAE1B,GAAG,CAAEF,OAAO,CAAC4B,OAAO,CAACE,SAAT,CAAP,CAA2B5B,GAAlC,CAAP,CAAgD,CAAhE,CADf,CAEAyB,MAAM,CAAE,UAFR,CADQ,CAIR,CAAEiB,IAAI,CAAGhB,OAAD,EAAcA,OAAO,CAACE,SAAR,GAAqBtB,CAAAA,QAA3C,CAAsDmB,MAAM,CAAE,OAA9D,CAJQ,CAKR,CAAEA,MAAM,CAAE,UAAV,CALQ,CADZ,CAFL,EAWIV,YAAY,CAAEzB,IAAI,CAAEoC,OAAD,GAAc,CAAE/B,IAAI,CAAE,OAAR,CAAiBC,KAAK,cAAQ8B,OAAO,CAAC3B,MAAhB,mCAAtB,CAAd,CAAD,CAAN,CACf,+BADe,CACkB,yFADlB,CAXhB,CAlBC,CAiCJuD,QAAQ,gBACJ7C,OAAO,CAAE,QADL,CAEJG,EAAE,CAAE,CACAY,UAAU,CAAE,CACR,CAAEkB,IAAI,CAAGhB,OAAD,EAAcxB,QAAQ,CAACwB,OAAO,CAACE,SAAT,CAAR,GAAgCxB,CAAtD,CAA0DqB,MAAM,CAAE,MAAlE,CADQ,CAER,CAAEiB,IAAI,CAAGhB,OAAD,EAAcxB,QAAQ,CAACwB,OAAO,CAACE,SAAT,CAAR,GAAgCzB,CAAtD,CAA0DsB,MAAM,CAAE,iBAAlE,CAFQ,CAGR,CAAEiB,IAAI,CAAGhB,OAAD,EAAcA,OAAO,CAACE,SAAR,GAAqBtB,CAAAA,QAA3C,CAAsDmB,MAAM,CAAE,OAA9D,CAHQ,CAIR,CAAEA,MAAM,CAAE,UAAV,CAJQ,CADZ,CAFA,EAUDV,YAAY,CAAEzB,IAAI,CAAEoC,OAAD,GAAc,CAAE/B,IAAI,CAAE,OAAR,CAAiBC,KAAK,cAAQ8B,OAAO,CAAC1B,GAAhB,2CAAtB,CAAd,CAAD,CAAN,CACf,+BADe,CACkB,wFADlB,CAVX,CAjCJ,CA+CJC,IAAI,gBACAQ,OAAO,CAAE,QADT,CAEAG,EAAE,CAAE,CACAY,UAAU,CAAE,CACR,CAAEkB,IAAI,CAAGhB,OAAD,EAAa,SAAW5B,OAAO,CAAC4B,OAAO,CAACE,SAAT,CAAP,EAA8B,EAAzC,CAArB,CACAxC,OAAO,CAAEC,MAAM,CAAEqC,OAAD,EAAa,CAAE,MAAO,CAAEzB,IAAI,CAAEH,OAAO,CAAC4B,OAAO,CAACE,SAAT,CAAP,CAA2B3B,IAAnC,CAAP,CAAkD,CAAlE,CADf,CAEAwB,MAAM,CAAE,aAFR,CADQ,CAIR,CAAEiB,IAAI,CAAGhB,OAAD,EAAcA,OAAO,CAACE,SAAR,GAAqBtB,CAAAA,QAA3C,CAAsDmB,MAAM,CAAE,OAA9D,CAJQ,CAKR,CAAEA,MAAM,CAAE,UAAV,CALQ,CADZ,CAFJ,EAWGV,YAAY,CAAEzB,IAAI,CAAEoC,OAAD,GAAc,CAAE/B,IAAI,CAAE,OAAR,CAAiBC,KAAK,cAAQ8B,OAAO,CAAC1B,GAAhB,gCAAtB,CAAd,CAAD,CAAN,CACf,+BADe,CACkB,+DADlB,CAXf,CA/CA,CA8DJuD,eAAe,gBACX9C,OAAO,CAAE,QADE,CAEXG,EAAE,CAAE,CACAY,UAAU,CAAE,CACR,CAACkB,IAAI,CAAGhB,OAAD,EAAcxB,QAAQ,CAACwB,OAAO,CAACE,SAAT,CAAR,GAAgCxB,CAArD,CAAyDqB,MAAM,CAAE,KAAjE,CADQ,CAER,CAACiB,IAAI,CAAGhB,OAAD,EAAcxB,QAAQ,CAACwB,OAAO,CAACE,SAAT,CAAR,GAAgCzB,CAArD,CAAyDsB,MAAM,CAAE,WAAjE,CAFQ,CAGR,CAAEiB,IAAI,CAAGhB,OAAD,EAAcA,OAAO,CAACE,SAAR,GAAqBtB,CAAAA,QAA3C,CAAsDmB,MAAM,CAAE,OAA9D,CAHQ,CAIR,CAAEA,MAAM,CAAE,UAAV,CAJQ,CADZ,CAFO,EAURV,YAAY,CAAEzB,IAAI,CAAEoC,OAAD,GAAc,CAAE/B,IAAI,CAAE,OAAR,CAAiBC,KAAK,yDAAmD8B,OAAO,CAAC3B,MAA3D,gBAAwE2B,OAAO,CAAC1B,GAAhF,uBAAtB,CAAd,CAAD,CAAN,CACf,+BADe,CACkB,4FADlB,CAVJ,CA9DX,CA4EJwD,WAAW,gBACP/C,OAAO,CAAE,QADF,CAEPG,EAAE,CAAG,CACDY,UAAU,CAAE,CACR,CAACkB,IAAI,CAAGhB,OAAD,EAAcxB,QAAQ,CAACwB,OAAO,CAACE,SAAT,CAAR,GAAgCxB,CAArD,CAAyDqB,MAAM,CAAE,KAAjE,CADQ,CAER,CAACiB,IAAI,CAAGhB,OAAD,EAAcxB,QAAQ,CAACwB,OAAO,CAACE,SAAT,CAAR,GAAgCzB,CAArD,CAAyDsB,MAAM,CAAE,WAAjE,CAFQ,CAGR,CAAEiB,IAAI,CAAGhB,OAAD,EAAcA,OAAO,CAACE,SAAR,GAAqBtB,CAAAA,QAA3C,CAAsDmB,MAAM,CAAE,OAA9D,CAHQ,CAIR,CAAEA,MAAM,CAAE,UAAV,CAJQ,CADX,CAFE,EAUJV,YAAY,CAAEzB,IAAI,CAAEoC,OAAD,GAAc,CAAE/B,IAAI,CAAE,OAAR,CAAiBC,KAAK,yDAAmD8B,OAAO,CAAC3B,MAA3D,gBAAwE2B,OAAO,CAAC1B,GAAhF,gBAA0F0B,OAAO,CAACzB,IAAlG,KAAtB,CAAd,CAAD,CAAN,CACf,+BADe,CACkB,4FADlB,CAVR,CA5EP,CA0FJwD,SAAS,CAAE,CACPhD,OAAO,CAAE,QADF,CAEPC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAErB,IAAI,CAAEoC,OAAD,GAAc,CACtB/B,IAAI,CAAE,OADgB,CAEtBC,KAAK,qCAFiB,CAAd,CAAD,CADP,CADJ,CAFD,CA1FP,CAoGd;AA7GmB,CA8GlB;AA5MK,CAFwD,CAA7D,CAoNP;AACA,MACA,KAAM8D,CAAAA,QAAQ,CAAG,sCAAjB,CACA,KAAMC,CAAAA,OAAO,CAAG,4CAAhB,CACA,KAAM1B,CAAAA,UAAU,CAAIxC,IAAD,EACfmE,KAAK,CAAC,GAAIC,CAAAA,OAAJ,CAAYH,QAAQ,CAAGC,OAAvB,CAAgC,CAClCG,MAAM,CAAE,MAD0B,CAElCC,OAAO,CAAE,CAAE,SAAU,kDAAZ,CAFyB,CAEyC;AAC3EC,IAAI,wBAAevE,IAAf,OAH8B,CAAhC,CAAD,CAAL,CAKKwE,IALL,CAKU9B,IAAI,EAAIA,IAAI,CAAC+B,IAAL,EALlB,CADJ","sourcesContent":["import { MachineConfig, Machine, Action, actions, assign } from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nconst { send, cancel } = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Curie\" },\n    \"George\": { person: \"George Smith\" },\n    \"Axel\": { person: \"Axel Rose\" },\n    \"Sebastian\": { person: \"Sebastian Bach\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n    \"at 5\": { time: \"5:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet count = 0;\nconst commands = { \"stop\":\"S\", \"help\":\"S\" };\n\nfunction promptAndAsk1(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: string, help:string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH: 'ask'}\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 4000, id: 'timeout'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n            help: {\n                entry: say(help),\n                on: { ENDSPEECH: 'ask' }\n            }\n        }})}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk1(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n                }\n            }       \n        },\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        maxspeech : {\n            entry: say(\"Sorry I couldn't hear anything\"),\n            on: {'ENDSPEECH': 'mainappointment.hist'}\n        },\n\n        finalmaxspeech: {\n            entry: say(\"It appears you are not there anymore. Goodbye.\"),\n            on: {'ENDSPEECH': 'init'}\n        },\n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"mainappointment\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        \n        mainappointment: {\n            initial: 'who',\n            on: {\n                MAXSPEECH: [\n                    {cond: (context) => context.counter == 3, target: 'finalmaxspeech'},\n                    {target: 'maxspeech', actions: assign((context) => { count++; return { counter: count } })}\n                ]\n            },\n\n            states: {            \n                hist: { type: 'history', history: 'shallow' },\n\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                            target: \"day\" },\n                            { cond: (context) => (context.recResult in commands),\n                            target: \".help\" },\n                            { target: \".nomatch\" }\n                        ]\n                    },\n                ...promptAndAsk (say (\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")\n                },    \n\n                day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => 'day' in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                            target: 'wholeday'},\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK ${context.person}. On which day is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")\n                },\n\n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => (grammar2[context.recResult] === b), target: \"time\" },\n                            { cond: (context) => (grammar2[context.recResult] === a), target: \"confirmwholeday\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }               \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK ${context.day}. Will your meeting take the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")\n                },\n\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                            target: \"confirmtime\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK ${context.day}. What time is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")\n                },    \n\n                confirmwholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },   \n\n                confirmtime: {\n                    initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                         \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },  \n\n                confirmed: {\n                    initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!` }))\n                        },\n                    }\n                }                 \n    } //states 2 closes\n    }, //MainAppointment closes   \n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n"]},"metadata":{},"sourceType":"module"}