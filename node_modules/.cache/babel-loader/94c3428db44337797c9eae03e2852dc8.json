{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport \"./styles.scss\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Curie\"\n  },\n  \"George\": {\n    person: \"George Smith\"\n  },\n  \"Axel\": {\n    person: \"Axel Rose\"\n  },\n  \"Sebastian\": {\n    person: \"Sebastian Bach\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  }\n};\nconst grammar2 = {\n  \"yes of course\": true,\n  \"sure\": true,\n  \"absolutely\": true,\n  \"yes\": true,\n  \"no way\": false,\n  \"no\": false\n};\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: \"query\",\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")),\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.query),\n        onDone: {\n          target: 'menu',\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: 'todo',\n          cond: context => context.option === 'todo'\n        }, {\n          target: 'timer',\n          cond: context => context.option === 'timer'\n        }, {\n          target: 'appointment',\n          cond: context => context.option === 'appointment'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I understand.\"\n          }))\n        }\n        /*            nomatch: {\n                       entry: say(\"Sorry, I don't understand\"),\n                       on: { ENDSPEECH: \"prompt\" }\n           } */\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create an appointment\"\n          }))\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I didn't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === b,\n          target: \"time\"\n        }, {\n          cond: context => grammar2[context.recResult] === a,\n          target: \"confirm_meeting_whole_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know that\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_meeting_whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === b,\n          target: \"init\"\n        }, {\n          cond: context => grammar2[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === b,\n          target: \"who\"\n        }, {\n          cond: context => grammar2[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","context","option","recResult","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","appointment","who","nomatch","wholeday","confirm_meeting_whole_day","confirm_time","confirmed","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Curie\" },\n    \"George\": { person: \"George Smith\" },\n    \"Axel\": { person: \"Axel Rose\" },\n    \"Sebastian\": { person: \"Sebastian Bach\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Saturday\": { day: \"Saturday\" },\n\t\"on Sunday\": { day: \"Sunday\" },\n\n\t\"at 5\": { time: \"5:00\" },\n\t\"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.query),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n\n\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I don't know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n"]},"metadata":{},"sourceType":"module"}