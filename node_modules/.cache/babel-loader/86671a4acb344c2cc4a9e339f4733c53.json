{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { actions, assign } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, nomatch, help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: prompt,\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      help: {\n        entry: say(help),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Curie\"\n  },\n  \"George\": {\n    person: \"George Smith\"\n  },\n  \"Axel\": {\n    person: \"Axel Rose\"\n  },\n  \"Sebastian\": {\n    person: \"Sebastian Bach\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  }\n};\nconst grammar2 = {\n  \"yes of course\": true,\n  \"sure\": true,\n  \"absolutely\": true,\n  \"yes\": true,\n  \"no way\": false,\n  \"no\": false\n};\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet counter = 0;\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"S\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"mainappointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry could you repeat that?\"),\n      on: {\n        'ENDSPEECH': 'appointment.hist'\n      }\n    },\n    finalmaxspeech: {\n      entry: say(\"It appears you are not there anymore. Goodbye.\"),\n      on: {\n        'ENDSPEECH': 'init'\n      }\n    },\n    mainappointment: {\n      initial: 'who',\n      on: {\n        MAXSPEECH: [{\n          target: 'maxspeech',\n          actions: assign(context => {\n            counter++;\n            return {\n              counter: counter\n            };\n          })\n        }, {\n          cond: context => context.counter === 3,\n          target: 'finalmaxspeech'\n        }]\n      },\n      states: {\n        hist: {\n          type: \"history\",\n          history: 'shallow'\n        },\n        who: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              //cond: (context) => !(context.recResult in commands),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")),\n        day: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => 'day' in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: 'wholeday'\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")),\n        wholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"time\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmwholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.day, \". Will your meeting take the whole day?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")),\n        time: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirmtime\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.day, \". What time is your meeting?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")),\n        confirmwholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"init\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),\n        confirmtime: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"who\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),\n        confirmed: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"init\"\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      } //states 2 closes\n\n    } //MainAppointment closes   \n\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["actions","assign","send","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","nomatch","help","initial","states","entry","on","ENDSPEECH","ask","delay","id","grammar","person","day","time","grammar2","a","b","counter","commands","dmMachine","init","CLICK","welcome","maxspeech","finalmaxspeech","mainappointment","MAXSPEECH","target","context","cond","hist","history","who","RECOGNISED","recResult","wholeday","confirmwholeday","confirmtime","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, actions, assign } from \"xstate\";\nconst { send, cancel } = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: any, help:any) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH: 'ask'}\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 5000, id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n            help: {\n                entry: say(help),\n                on: { ENDSPEECH: 'ask' }\n            }\n        }})}\n    \n    const grammar: { [index: string]: { person?: string, day?: string, time?: string } \n    } = {\n        \"John\": { person: \"John Appleseed\" },\n        \"Mary\": { person: \"Mary Curie\" },\n        \"George\": { person: \"George Smith\" },\n        \"Axel\": { person: \"Axel Rose\" },\n        \"Sebastian\": { person: \"Sebastian Bach\" },\n    \n        \"on Monday\": { day: \"Monday\" },\n        \"on Tuesday\": { day: \"Tuesday\" },\n        \"on Wednesday\": { day: \"Wednesday\" },\n        \"on Thursday\": { day: \"Thursday\" },\n        \"on Friday\": { day: \"Friday\" },\n        \"on Saturday\": { day: \"Saturday\" },\n        \"on Sunday\": { day: \"Sunday\" },\n    \n        \"at 5\": { time: \"5:00\" },\n        \"at 6\": { time: \"6:00\" },\n        \"at 7\": { time: \"7:00\" },\n        \"at 8\": { time: \"8:00\" },\n        \"at 9\": { time: \"9:00\" },\n        \"at 10\": { time: \"10:00\" },\n        \"at 11\": { time: \"11:00\" },\n        \"at 12\": { time: \"12:00\" }\n    }\n    \n    const grammar2: { [index: string]: boolean } = {\n        \"yes of course\": true,\n        \"sure\": true,\n        \"absolutely\": true,\n        \"yes\": true,\n        \"no way\": false,\n        \"no\": false\n    }\n    \n    let a = grammar2[\"yes\"];\n    let b = grammar2[\"no\"];\n    let counter = 0;\n    const commands = { \"stop\":\"S\", \"help\":\"S\" };\n    \n    export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n        initial: 'init',\n        states: {\n            init: {\n                on: {\n                    CLICK: 'welcome'\n                }\n            },\n\n            welcome: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"mainappointment\" },\n                states: {\n                    prompt: { entry: say(\"Let's create an appointment\") }\n                }\n            },\n\n            maxspeech : {\n                entry: say(\"Sorry could you repeat that?\"),\n                on: {'ENDSPEECH': 'appointment.hist'}\n            },\n\n            finalmaxspeech: {\n                entry: say(\"It appears you are not there anymore. Goodbye.\"),\n                on: {'ENDSPEECH': 'init'}\n            },\n            \n            mainappointment: {\n                initial: 'who',\n                on: {\n                    MAXSPEECH: [\n                        {target: 'maxspeech', actions: assign((context) => { counter++; return { counter: counter } })},\n                        {cond: (context) => context.counter === 3, target: 'finalmaxspeech'}\n                    ]\n                },\n\n\n            states: {            \n                hist: { type: \"history\", history: 'shallow' },\n\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                            target: \"day\" },\n                            { cond: (context) => (context.recResult in commands),\n                            target: \".help\" },\n                            { //cond: (context) => !(context.recResult in commands),\n                                target: \".nomatch\" }\n                        ]\n                    },\n                ...promptAndAsk (say (\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")\n                },    \n    \n                day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => 'day' in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                            target: 'wholeday'},\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. ${context.person}. On which day is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")\n                },\n    \n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => (grammar2[context.recResult] === b), target: \"time\" },\n                            { cond: (context) => (grammar2[context.recResult] === a), target: \"confirmwholeday\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }               \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. ${context.day}. Will your meeting take the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")\n                },\n    \n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                            target: \"confirmtime\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. ${context.day}. What time is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")\n                },    \n    \n                confirmwholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"init\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },   \n\n                confirmtime: {\n                    initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                         \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },  \n\n                confirmed: {\n                    initial: \"prompt\",\n                    on: { ENDSPEECH: \"init\" },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!` }))\n                        },\n                    }\n                }           \n    } //states 2 closes\n    }, //MainAppointment closes   \n    }})"]},"metadata":{},"sourceType":"module"}