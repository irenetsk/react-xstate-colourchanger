{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/SmartHome';\nexport const GrammarUse = input => {\n  const gram = loadGrammar(grammar);\n  const prs = parse(input.split(/\\s+/), gram);\n  const result = prs.resultsForRule(gram.$root)[0];\n  return [result.command.action, result.command.object];\n};\n_c = GrammarUse;\nexport function listen() {\n  return send('LISTEN');\n}\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          actions: [assign(context => {\n            return {\n              action: GrammarUse(context.recResult)[0]\n            };\n          }), assign(context => {\n            return {\n              object: GrammarUse(context.recResult)[1]\n            };\n          })],\n          target: \"answer\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome. What would you like me to do?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"I'm sorry, I'm not programmed to do that\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    answer: {\n      entry: send('RECOGNISED'),\n      on: {\n        RECOGNISED: [{\n          target: 'case1',\n          cond: context => GrammarUse(context.recResult)[1] === \"light\"\n        }, {\n          target: 'case1',\n          cond: context => GrammarUse(context.recResult)[1] === \"heat\"\n        }, {\n          target: 'case1',\n          cond: context => GrammarUse(context.recResult)[1] === \"air conditioning\"\n        }, {\n          target: 'case2',\n          cond: context => GrammarUse(context.recResult)[1] === \"window\"\n        }, {\n          target: 'case2',\n          cond: context => GrammarUse(context.recResult)[1] === \"door\"\n        }]\n      }\n    },\n    case1: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.object, \" \").concat(context.action)\n          }))\n        }\n      }\n    },\n    case2: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.object, \" \").concat(context.action)\n          }))\n        }\n      }\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"GrammarUse\");","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","GrammarUse","input","gram","prs","split","result","resultsForRule","$root","command","action","object","listen","say","text","_context","type","value","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","actions","context","recResult","target","prompt","entry","ENDSPEECH","ask","nomatch","answer","cond","case1","case2"],"mappings":"AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAgB;AACtC,QAAMC,IAAI,GAAGL,WAAW,CAACE,OAAD,CAAxB;AACA,QAAMI,GAAG,GAAGL,KAAK,CAACG,KAAK,CAACG,KAAN,CAAY,KAAZ,CAAD,EAAqBF,IAArB,CAAjB;AACA,QAAMG,MAAM,GAAGF,GAAG,CAACG,cAAJ,CAAmBJ,IAAI,CAACK,KAAxB,EAA+B,CAA/B,CAAf;AACA,SAAO,CAACF,MAAM,CAACG,OAAP,CAAeC,MAAhB,EAAwBJ,MAAM,CAACG,OAAP,CAAeE,MAAvC,CAAP;AAAsD,CAJnD;KAAMV,U;AAMb,OAAO,SAASW,MAAT,GAAgD;AACnD,SAAOhB,IAAI,CAAC,QAAD,CAAX;AAAsB;AAE1B,OAAO,SAASiB,GAAT,CAAaC,IAAb,EAAyD;AAC5D,SAAOlB,IAAI,CAAEmB,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AAAwE;AAE5E,OAAO,MAAMI,SAAmD,GAAI;AAChEC,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AACAC,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,OAAO,EAAE;AACLL,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,EAAE,EAAE;AACAG,QAAAA,UAAU,EAAE,CACR;AAACC,UAAAA,OAAO,EAAE,CACN7B,MAAM,CAAE8B,OAAD,IAAa;AAAE,mBAAQ;AAACjB,cAAAA,MAAM,EAAET,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B;AAAT,aAAR;AAAoD,WAApE,CADA,EAEF/B,MAAM,CAAE8B,OAAD,IAAa;AAAE,mBAAO;AAAEhB,cAAAA,MAAM,EAAEV,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B;AAAV,aAAP;AAAoD,WAApE,CAFJ,CAAV;AAGAC,UAAAA,MAAM,EAAE;AAHR,SADQ,EAKZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALY;AADZ,OAFC;AAULT,MAAAA,MAAM,EAAE;AACJU,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEnC,IAAI,CAAE+B,OAAD,KAAc;AACtBX,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,EAAE;AAFe,WAAd,CAAD,CADP;AAKJK,UAAAA,EAAE,EAAE;AAAEU,YAAAA,SAAS,EAAE;AAAb;AALA,SADJ;AAQJC,QAAAA,GAAG,EAAE;AACDF,UAAAA,KAAK,EAAEnB,MAAM;AADZ,SARD;AAWJsB,QAAAA,OAAO,EAAE;AACLH,UAAAA,KAAK,EAAElB,GAAG,CAAC,0CAAD,CADL;AAELS,UAAAA,EAAE,EAAE;AAAEU,YAAAA,SAAS,EAAE;AAAb;AAFC;AAXL;AAVH,KANL;AAiCJG,IAAAA,MAAM,EAAE;AACJJ,MAAAA,KAAK,EAAEnC,IAAI,CAAC,YAAD,CADP;AAEJ0B,MAAAA,EAAE,EAAE;AAACG,QAAAA,UAAU,EAAE,CACT;AAAEI,UAAAA,MAAM,EAAE,OAAV;AAAmBO,UAAAA,IAAI,EAAGT,OAAD,IAAa1B,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B,MAAqC;AAA3E,SADS,EAET;AAAEC,UAAAA,MAAM,EAAE,OAAV;AAAmBO,UAAAA,IAAI,EAAGT,OAAD,IAAa1B,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B,MAAqC;AAA3E,SAFS,EAGT;AAAEC,UAAAA,MAAM,EAAE,OAAV;AAAmBO,UAAAA,IAAI,EAAGT,OAAD,IAAa1B,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B,MAAqC;AAA3E,SAHS,EAIT;AAAEC,UAAAA,MAAM,EAAE,OAAV;AAAmBO,UAAAA,IAAI,EAAGT,OAAD,IAAa1B,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B,MAAqC;AAA3E,SAJS,EAKT;AAAEC,UAAAA,MAAM,EAAE,OAAV;AAAmBO,UAAAA,IAAI,EAAGT,OAAD,IAAa1B,UAAU,CAAC0B,OAAO,CAACC,SAAT,CAAV,CAA8B,CAA9B,MAAqC;AAA3E,SALS;AAAb;AAFA,KAjCJ;AA4CJS,IAAAA,KAAK,EAAE;AACHlB,MAAAA,OAAO,EAAE,QADN;AAEHC,MAAAA,MAAM,EAAE;AACJU,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEnC,IAAI,CAAE+B,OAAD,KAAc;AACtBX,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASU,OAAO,CAAChB,MAAjB,cAA2BgB,OAAO,CAACjB,MAAnC;AAFiB,WAAd,CAAD;AADP;AADJ;AAFL,KA5CH;AAsDJ4B,IAAAA,KAAK,EAAE;AACFnB,MAAAA,OAAO,EAAE,QADP;AAEFC,MAAAA,MAAM,EAAE;AACLU,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEnC,IAAI,CAAE+B,OAAD,KAAc;AACtBX,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASU,OAAO,CAAChB,MAAjB,cAA2BgB,OAAO,CAACjB,MAAnC;AAFiB,WAAd,CAAD;AADP;AADH;AAFN;AAtDH;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/SmartHome'\n\nexport const GrammarUse = (input: any) => {\n    const gram = loadGrammar(grammar)\n    const prs = parse(input.split(/\\s+/), gram)\n    const result = prs.resultsForRule(gram.$root)[0]\n    return [result.command.action, result.command.object]}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')}\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    {actions: [\n                        assign((context) => { return  {action: GrammarUse(context.recResult)[0] }}), \n                            assign((context) => { return { object: GrammarUse(context.recResult)[1] }})],\n                    target: \"answer\"},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: \"Welcome. What would you like me to do?\"\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"I'm sorry, I'm not programmed to do that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        answer: {            \n            entry: send('RECOGNISED'),\n            on: {RECOGNISED: [\n                    { target: 'case1', cond: (context) => GrammarUse(context.recResult)[1] === \"light\" },\n                    { target: 'case1', cond: (context) => GrammarUse(context.recResult)[1] === \"heat\" },\n                    { target: 'case1', cond: (context) => GrammarUse(context.recResult)[1] === \"air conditioning\" },\n                    { target: 'case2', cond: (context) => GrammarUse(context.recResult)[1] === \"window\" },\n                    { target: 'case2', cond: (context) => GrammarUse(context.recResult)[1] === \"door\" },\n                ]\n            },\n        },\n        case1: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.object} ${context.action}` })),\n            }\n        }\n    },\n        case2: {\n             initial: \"prompt\",\n             states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.object} ${context.action}` }))\n                    }\n                }\n        }\n\n\n\n    }\n})\n"]},"metadata":{},"sourceType":"module"}