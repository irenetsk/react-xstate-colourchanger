{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { actions, assign } from \"xstate\";\nconst send = actions.send;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Curie\"\n  },\n  \"George\": {\n    person: \"George Smith\"\n  },\n  \"Axel\": {\n    person: \"Axel Rose\"\n  },\n  \"Sebastian\": {\n    person: \"Sebastian Bach\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  }\n};\nconst grammar2 = {\n  \"yes of course\": true,\n  \"sure\": true,\n  \"absolutely\": true,\n  \"yes\": true,\n  \"no way\": false,\n  \"no\": false\n};\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet count = 0;\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"S\"\n};\n\nfunction promptAndAsk(prompt, nomatch, help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: prompt,\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      help: {\n        entry: say(help),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"mainappointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry I couldn't hear anything\"),\n      on: {\n        'ENDSPEECH': 'mainappointment.hist'\n      }\n    },\n    finalmaxspeech: {\n      entry: say(\"It appears you are not there anymore. Goodbye.\"),\n      on: {\n        'ENDSPEECH': 'init'\n      }\n    },\n    mainappointment: {\n      initial: 'who',\n      on: {\n        MAXSPEECH: [{\n          target: 'maxspeech',\n          actions: assign(context => {\n            count++;\n            return {\n              counter: count\n            };\n          })\n        }, {\n          cond: context => context.counter == 3,\n          target: 'finalmaxspeech'\n        }]\n      },\n      states: {\n        hist: {\n          type: 'history',\n          history: 'shallow'\n        },\n        who: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")),\n        day: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => 'day' in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: 'wholeday'\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")),\n        wholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"time\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmwholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.day, \". Will your meeting take the whole day?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")),\n        time: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirmtime\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.day, \". What time is your meeting?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")),\n        confirmwholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"who\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),\n        confirmtime: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"who\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),\n        confirmed: {\n          initial: \"prompt\",\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      } //states 2 closes\n\n    } //MainAppointment closes   \n\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["actions","assign","send","say","text","_context","type","value","grammar","person","day","time","grammar2","a","b","count","commands","promptAndAsk","prompt","nomatch","help","initial","states","entry","on","ENDSPEECH","ask","delay","id","dmMachine","init","CLICK","welcome","maxspeech","finalmaxspeech","mainappointment","MAXSPEECH","target","context","counter","cond","hist","history","who","RECOGNISED","recResult","wholeday","confirmwholeday","confirmtime","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, actions, assign } from \"xstate\";\nconst { send } = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\nreturn send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n\"John\": { person: \"John Appleseed\" },\n\"Mary\": { person: \"Mary Curie\" },\n\"George\": { person: \"George Smith\" },\n\"Axel\": { person: \"Axel Rose\" },\n\"Sebastian\": { person: \"Sebastian Bach\" },\n\n\"on Monday\": { day: \"Monday\" },\n\"on Tuesday\": { day: \"Tuesday\" },\n\"on Wednesday\": { day: \"Wednesday\" },\n\"on Thursday\": { day: \"Thursday\" },\n\"on Friday\": { day: \"Friday\" },\n\"on Saturday\": { day: \"Saturday\" },\n\"on Sunday\": { day: \"Sunday\" },\n\n\"at 5\": { time: \"5:00\" },\n\"at 6\": { time: \"6:00\" },\n\"at 7\": { time: \"7:00\" },\n\"at 8\": { time: \"8:00\" },\n\"at 9\": { time: \"9:00\" },\n\"at 10\": { time: \"10:00\" },\n\"at 11\": { time: \"11:00\" },\n\"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n\"yes of course\": true,\n\"sure\": true,\n\"absolutely\": true,\n\"yes\": true,\n\"no way\": false,\n\"no\": false\n}\n\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet count = 0;\nconst commands = { \"stop\":\"S\", \"help\":\"S\" };\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: any, help:any) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH: 'ask'}\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 5000, id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n            help: {\n                entry: say(help),\n                on: { ENDSPEECH: 'ask' }\n            }\n        }})}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"mainappointment\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n\n        maxspeech : {\n            entry: say(\"Sorry I couldn't hear anything\"),\n            on: {'ENDSPEECH': 'mainappointment.hist'}\n        },\n\n        finalmaxspeech: {\n            entry: say(\"It appears you are not there anymore. Goodbye.\"),\n            on: {'ENDSPEECH': 'init'}\n        },\n        \n        mainappointment: {\n            initial: 'who',\n            on: {\n                MAXSPEECH: [\n                    {target: 'maxspeech', actions: assign((context) => { count++; return { counter: count } })},\n                    {cond: (context) => context.counter == 3, target: 'finalmaxspeech'}\n                ]\n            },\n\n            states: {            \n                hist: { type: 'history', history: 'shallow' },\n\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                            target: \"day\" },\n                            { cond: (context) => (context.recResult in commands),\n                            target: \".help\" },\n                            { target: \".nomatch\" }\n                        ]\n                    },\n                ...promptAndAsk (say (\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")\n                },    \n\n                day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => 'day' in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                            target: 'wholeday'},\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. ${context.person}. On which day is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")\n                },\n\n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => (grammar2[context.recResult] === b), target: \"time\" },\n                            { cond: (context) => (grammar2[context.recResult] === a), target: \"confirmwholeday\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }               \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. ${context.day}. Will your meeting take the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")\n                },\n\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                            target: \"confirmtime\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. ${context.day}. What time is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")\n                },    \n\n                confirmwholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },   \n\n                confirmtime: {\n                    initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                         \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },  \n\n                confirmed: {\n                    initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!` }))\n                        },\n                    }\n                }                 \n    } //states 2 closes\n    }, //MainAppointment closes   \n    }})"]},"metadata":{},"sourceType":"module"}