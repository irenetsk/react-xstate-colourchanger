{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Curie\"\n  },\n  \"George\": {\n    person: \"George Smith\"\n  },\n  \"Axel\": {\n    person: \"Axel Rose\"\n  },\n  \"Sebastian\": {\n    person: \"Sebastian Bach\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  }\n};\nconst grammar2 = {\n  \"yes of course\": true,\n  \"sure\": true,\n  \"absolutely\": true,\n  \"yes\": true,\n  \"no way\": false,\n  \"no\": false\n};\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I didn't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === b,\n          target: \"time\"\n        }, {\n          cond: context => grammar2[context.recResult] === a,\n          target: \"confirm_meeting_whole_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"create\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.day, \". What time is your meeting?\"),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          }))\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know that\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_meeting_whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === b,\n          target: \"init\"\n        }, {\n          cond: context => grammar2[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === b,\n          target: \"who\"\n        }, {\n          cond: context => grammar2[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","wholeday","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, reaction?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Curie\" },\n    \"George\": { person: \"George Smith\" },\n    \"Axel\": { person: \"Axel Rose\" },\n    \"Sebastian\": { person: \"Sebastian Bach\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Saturday\": { day: \"Saturday\" },\n\t\"on Sunday\": { day: \"Sunday\" },\n\n\t\"at 5\": { time: \"5:00\" },\n\t\"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { index: string } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"create\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    on: { ENDSPEECH: \"ask\" }\n                    }))\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n"]},"metadata":{},"sourceType":"module"}