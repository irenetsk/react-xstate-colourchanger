{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Regina\": {\n    person: \"Regina Phalange\"\n  },\n  \"Rachel\": {\n    person: \"Rachel Green\"\n  },\n  \"Beyonce\": {\n    person: \"Beyonce Knowles\"\n  },\n  \"Drake\": {\n    person: \"Doctor Drake Ramoray\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"1\": {\n    time: \"13:00\"\n  },\n  \"at 1\": {\n    time: \"13:00\"\n  },\n  \"2\": {\n    time: \"14:00\"\n  },\n  \"at 2\": {\n    time: \"14:00\"\n  },\n  \"3\": {\n    time: \"15:00\"\n  },\n  \"at 3\": {\n    time: \"15:00\"\n  },\n  \"4\": {\n    time: \"16:00\"\n  },\n  \"at 4\": {\n    time: \"16:00\"\n  },\n  \"5\": {\n    time: \"17:00\"\n  },\n  \"at 5\": {\n    time: \"17:00\"\n  },\n  \"6\": {\n    time: \"18:00\"\n  },\n  \"at 6\": {\n    time: \"18:00\"\n  }\n};\nconst boolgrammar = {\n  \"yes\": {\n    yes: true\n  },\n  \"of course\": {\n    yes: true\n  },\n  \"sure\": {\n    yes: true\n  },\n  \"yeah\": {\n    yes: true\n  },\n  \"no\": {\n    no: false\n  },\n  \"no way\": {\n    no: false\n  },\n  \"nope\": {\n    no: false\n  }\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 4000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'createAppointment'\n      }\n    },\n    createAppointment: {\n      initial: 'who',\n      on: {\n        RECOGNISED: {\n          target: 'help',\n          cond: context => context.recResult === 'help'\n        },\n        MAXSPEECH: [{\n          target: 'maxspeech2',\n          cond: context => context.counter === 1\n        }, {\n          target: 'maxspeech3',\n          cond: context => context.counter === 2\n        }, {\n          target: \"maxspeech1\"\n        }]\n      },\n      states: {\n        hist: {\n          type: 'history'\n        },\n        who: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.help',\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }), cancel('maxsp')],\n              target: \"day\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Let's create an appointment! Who are you meeting with?\")),\n            nomatch: {\n              entry: say(\"Sorry I don't know them.\"),\n              on: {\n                ENDSPEECH: [{\n                  target: \"prompt\",\n                  actions: cancel('maxsp')\n                }]\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.help',\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }), cancel('maxsp')],\n              target: \"allday\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 4000,\n                id: 'maxsp'\n              })]\n            },\n            nomatch: {\n              entry: say(\"Sorry I didn't catch that. On which day is your meeting?\"),\n              on: {\n                ENDSPEECH: [{\n                  target: \"ask\",\n                  actions: cancel('maxsp')\n                }]\n              }\n            }\n          }\n        },\n        allday: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.help',\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"yes\" in (boolgrammar[context.recResult] || {}),\n              actions: cancel('maxsp'),\n              target: \"schedule_meeting_allday\"\n            }, {\n              cond: context => \"no\" in (boolgrammar[context.recResult] || {}),\n              actions: cancel('maxsp'),\n              target: \"time\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.day, \". Will it take all day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 4000,\n                id: 'maxsp'\n              })]\n            },\n            nomatch: {\n              entry: say(\"Sorry I didn't catch that. Will it take all day?\"),\n              on: {\n                ENDSPEECH: [{\n                  target: \"ask\",\n                  actions: cancel('maxsp')\n                }]\n              }\n            }\n          }\n        },\n        time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.help',\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }), cancel('maxsp')],\n              target: \"schedule_meeting\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. What time is your meeting?\"\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 4000,\n                id: 'maxsp'\n              })]\n            },\n            nomatch: {\n              entry: say(\"Sorry I didn't catch that. What time is your meeting?\"),\n              on: {\n                ENDSPEECH: [{\n                  target: \"ask\",\n                  actions: cancel('maxsp')\n                }]\n              }\n            }\n          }\n        },\n        schedule_meeting_allday: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.help',\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"yes\" in (boolgrammar[context.recResult] || {}),\n              actions: cancel('maxsp'),\n              target: \"end\"\n            }, {\n              cond: context => \"no\" in (boolgrammar[context.recResult] || {}),\n              actions: cancel('maxsp'),\n              target: \"who\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \"?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 4000,\n                id: 'maxsp'\n              })]\n            },\n            nomatch: {\n              entry: say(\"Sorry I didn't catch that\"),\n              on: {\n                ENDSPEECH: [{\n                  target: \"ask\",\n                  actions: cancel('maxsp')\n                }]\n              }\n            }\n          }\n        },\n        schedule_meeting: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.help',\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"yes\" in (boolgrammar[context.recResult] || {}),\n              actions: cancel('maxsp'),\n              target: \"end\"\n            }, {\n              cond: context => \"no\" in (boolgrammar[context.recResult] || {}),\n              actions: cancel('maxsp'),\n              target: \"who\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 4000,\n                id: 'maxsp'\n              })]\n            },\n            nomatch: {\n              entry: say(\"Sorry I didn't catch that\"),\n              on: {\n                ENDSPEECH: [{\n                  target: \"ask\",\n                  actions: cancel('maxsp')\n                }]\n              }\n            }\n          }\n        },\n        end: {\n          initial: \"prompt\",\n          states: {\n            prompt: {\n              entry: say(\"Your appointment has been created.\"),\n              on: {\n                ENDSPEECH: \"#root.dm\"\n              }\n            }\n          }\n        }\n      }\n    },\n    maxspeech1: {\n      entry: say(\"I couldn't hear you.\"),\n      on: {\n        ENDSPEECH: [{\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 1\n        }, {\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 2\n        }, {\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 3\n        }]\n      }\n    },\n    maxspeech2: {\n      entry: say(\"Are you there?\"),\n      on: {\n        ENDSPEECH: [{\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 1\n        }, {\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 2\n        }, {\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 3\n        }]\n      }\n    },\n    maxspeech3: {\n      entry: say(\"You're not even listening, I give up.\"),\n      on: {\n        ENDSPEECH: [{\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 1\n        }, {\n          target: \"#root.dm.createAppointment.hist\",\n          cond: context => context.counter === 2\n        }, {\n          target: \"#root.dm\",\n          cond: context => context.counter === 3\n        }]\n      }\n    },\n    help: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: say(\"Help message.\"),\n          on: {\n            ENDSPEECH: \"#root.dm.createAppointment.hist\"\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/example.ts"],"names":["assign","actions","send","cancel","say","text","_context","type","value","listen","grammar","person","day","time","boolgrammar","yes","no","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","dmMachine","init","CLICK","createAppointment","RECOGNISED","target","cond","context","recResult","MAXSPEECH","counter","hist","who","nomatch","allday","schedule_meeting_allday","schedule_meeting","end","maxspeech1","maxspeech2","maxspeech3","help"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, positive?: string, negative?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Regina\": { person: \"Regina Phalange\" },\n    \"Rachel\": { person: \"Rachel Green\" },\n    \"Beyonce\": { person: \"Beyonce Knowles\" },\n    \"Drake\": { person: \"Doctor Drake Ramoray\" },\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"1\": { time: \"13:00\" },\n    \"at 1\": { time: \"13:00\" },\n    \"2\": { time: \"14:00\" },\n    \"at 2\": { time: \"14:00\" },\n    \"3\": { time: \"15:00\" },\n    \"at 3\": { time: \"15:00\" },\n    \"4\": { time: \"16:00\" },\n    \"at 4\": { time: \"16:00\" },\n    \"5\": { time: \"17:00\" },\n    \"at 5\": { time: \"17:00\" },\n    \"6\": { time: \"18:00\" },\n    \"at 6\": { time: \"18:00\" },\n}\n\nconst boolgrammar: { [index: string]: { yes?: boolean, no?: boolean } } = {\n    \"yes\": { yes: true },\n    \"of course\": { yes: true },\n    \"sure\": { yes: true },\n    \"yeah\": { yes: true },\n    \"no\": { no: false },\n    \"no way\": { no: false },\n    \"nope\": { no: false }\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n            },\n        }\n    })\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'createAppointment'\n            }\n        },\n        createAppointment: {\n            initial: 'who',\n            on: {\n                RECOGNISED: {\n                    target: 'help',\n                    cond: (context) => context.recResult === 'help'\n                },\n                MAXSPEECH: [{ target: 'maxspeech2', cond: (context) => context.counter === 1 },\n                {\n                    target: 'maxspeech3', cond: (context) => context.counter === 2\n                },\n                { target: \"maxspeech1\" }]\n            },\n            states: {\n                hist: { type: 'history' },\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' },\n                        {\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { person: grammar[context.recResult].person } }), cancel('maxsp')],\n                            target: \"day\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            ...promptAndAsk(\"Let's create an appointment! Who are you meeting with?\")\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I don't know them.\"),\n                            on: { ENDSPEECH: [{ target: \"prompt\", actions: cancel('maxsp') }] }\n                        }\n                    }\n                },\n                day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { day: grammar[context.recResult].day } }), cancel('maxsp')],\n                            target: \"allday\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.person}. On which day is your meeting?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that. On which day is your meeting?\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                allday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"schedule_meeting_allday\"\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"time\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.day}. Will it take all day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that. Will it take all day?\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { time: grammar[context.recResult].time } }), cancel('maxsp')],\n                            target: \"schedule_meeting\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. What time is your meeting?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that. What time is your meeting?\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                schedule_meeting_allday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"end\"\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"who\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day}?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                schedule_meeting: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"end\"\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"who\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                }, end: {\n                    initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: say(\"Your appointment has been created.\"),\n                            on: { ENDSPEECH: \"#root.dm\" }\n                        }\n                    }\n                }\n\n\n\n            }\n        },\n        maxspeech1: {\n            entry: say(\"I couldn't hear you.\"),\n            on: {\n                ENDSPEECH: [{ target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 1 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 2 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 3 }],\n            }\n        },\n        maxspeech2: {\n            entry: say(\"Are you there?\"),\n            on: {\n                ENDSPEECH: [{ target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 1 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 2 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 3 }],\n            }\n        },\n        maxspeech3: {\n            entry: say(\"You're not even listening, I give up.\"),\n            on: {\n                ENDSPEECH: [{ target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 1 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 2 },\n                { target: \"#root.dm\", cond: (context) => context.counter === 3 }],\n            }\n        },\n        help: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(\"Help message.\"),\n                    on: { ENDSPEECH: \"#root.dm.createAppointment.hist\" }\n                }\n            }\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}