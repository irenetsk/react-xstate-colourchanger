{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, nomatch, helping) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: prompt,\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      helping: {\n        entry: say(helping),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Patricia\": {\n    person: \"Patricia\"\n  },\n  \"Minerva\": {\n    person: \"Minerva S\"\n  },\n  \"mark\": {\n    person: \"Marc G\"\n  },\n  \"vladislav\": {\n    person: \"Vladislav M\"\n  },\n  \"Jacob\": {\n    person: \"Jacobo\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"tomorrow\": {\n    day: \"tomorrow\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at noon\": {\n    time: \"12:00\"\n  }\n};\nconst yesNo = {\n  \"yes\": {\n    yesNo: \"yes\"\n  },\n  \"yup\": {\n    yesNo: \"yes\"\n  },\n  \"yeah\": {\n    yesNo: \"yes\"\n  },\n  \"of course\": {\n    yesNo: \"yes\"\n  },\n  \"duh\": {\n    yesNo: \"yes\"\n  },\n  \"no\": {\n    yesNo: \"no\"\n  },\n  \"niet\": {\n    yesNo: \"no\"\n  },\n  \"no way\": {\n    yesNo: \"no\"\n  },\n  \"nope\": {\n    yesNo: \"no\"\n  }\n};\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"S\",\n  \"what\": 'W'\n};\nlet tempCount = 0;\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      // name of the state\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"appointment\"\n      },\n      // events\n      states: {\n        // substates\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    maxspeech: {\n      entry: say(\"Are you still there?\"),\n      on: {\n        'ENDSPEECH': 'appointment.hist'\n      }\n    },\n    disappointment: {\n      entry: say(\"Oh well... I'm disappointed\"),\n      on: {\n        'ENDSPEECH': 'init'\n      }\n    },\n    appointment: {\n      initial: \"who\",\n      on: {\n        MAXSPEECH: [{\n          cond: context => context.counter === 3,\n          target: 'disappointment'\n        }, {\n          target: 'maxspeech',\n          actions: assign(context => {\n            tempCount++;\n            return {\n              counter: tempCount\n            };\n          })\n        } // tempCount is my var and counter is kept in context\n        ]\n      },\n      states: {\n        hist: {\n          type: 'history'\n        },\n        who: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              // cancel('maxsp'), \n              target: \"day\"\n            }, {\n              cond: context => context.recResult in commands,\n              // actions: cancel('maxsp'),\n              // ...helping(\"You can say John or Patricia\"),\n              // target: 'hist' // If I go to stop, how do I come back here? WITH HISTORY!!\n              target: \".helping\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You can say John, Patricia, vladislav, and so on\")),\n        day: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              // cancel('maxsp')],\n              target: \"wholeDay\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".helping\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n        })), \"Sorry, when?\", \"You can say on Monday, on Tuesday, on Wednesday, and so on\")),\n        wholeDay: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n              // actions: cancel('maxsp'),\n              target: \"final1\"\n            }, {\n              cond: context => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n              // actions: cancel('maxsp'),\n              target: \"time\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".helping\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.day, \". Will it take the whole day?\")\n        })), \"Sorry, yes or no?\", \"You should answer yes or no\")),\n        final1: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n              // actions: cancel('maxsp'),\n              target: \"final\"\n            }, {\n              cond: context => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n              // actions: cancel('maxsp'),\n              target: \"who\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".helping\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n        })), \"Sorry, yes or no?\", \"You should answer yes if it will take the whole day or no otherwise\")),\n        time: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              //  cancel('maxsp'),],\n              target: \"final2\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".helping\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. What time is your meeting?\"\n        })), \"Sorry, could you repeat that?\", \"You can say at ten, at eleven or at noon\")),\n        final2: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n              // actions: cancel('maxsp'),\n              target: \"final\"\n            }, {\n              cond: context => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n              // actions: cancel('maxsp'),\n              target: \"who\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".helping\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n        })), \"Sorry, yes or no?\", \"You should say yes or no\")),\n        final: {\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created.\"\n              }))\n            }\n          }\n        }\n      }\n    }\n  } // final closing, do not touch!!!!\n\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/example.ts"],"names":["assign","actions","send","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","nomatch","helping","initial","states","entry","on","ENDSPEECH","ask","delay","id","grammar","person","day","time","yesNo","commands","tempCount","dmMachine","init","CLICK","welcome","maxspeech","disappointment","appointment","MAXSPEECH","cond","context","counter","target","hist","who","RECOGNISED","recResult","wholeDay","final1","final2","final"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: string, helping:string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH: 'ask'}\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {\n                                                            delay: 5000,\n                                                            id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n            helping: {\n                entry: say(helping),\n                on: { ENDSPEECH: 'ask' }\n            }\n        }\n    })\n}\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Patricia\" : { person: \"Patricia\"},\n    \"Minerva\": { person: \"Minerva S\"},\n    \"mark\": { person: \"Marc G\"},\n    \"vladislav\": { person: \"Vladislav M\"},\n    \"Jacob\": { person: \"Jacobo\"},\n    \"on Monday\": { day: \"Monday\"},\n    \"on Tuesday\": { day: \"Tuesday\"},\n    \"on Wednesday\": { day: \"Wednesday\"},\n    \"on Thursday\": { day: \"Thursday\"},\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"tomorrow\": { day: \"tomorrow\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at noon\": { time: \"12:00\"},\n}\n\nconst yesNo: { [index: string]: {yesNo: string}} = {\n\t\"yes\": { yesNo: \"yes\"},\n\t\"yup\": { yesNo: \"yes\"},\n\t\"yeah\": { yesNo: \"yes\"},\n\t\"of course\": { yesNo: \"yes\"},\n\t\"duh\": { yesNo: \"yes\"},\n\t\"no\": { yesNo: \"no\"},\n\t\"niet\": { yesNo: \"no\"},\n\t\"no way\": { yesNo: \"no\"},\n\t\"nope\": { yesNo: \"no\"},\n}\n\nconst commands = {\"stop\":\"S\", \"help\":\"S\", \"what\":'W'};\n\nlet tempCount = 0;\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: { // name of the state\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"appointment\" }, // events\n            states: { // substates\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n\n        maxspeech : {\n            entry: say(\"Are you still there?\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        disappointment: {\n            entry: say(\"Oh well... I'm disappointed\"),\n            on: {'ENDSPEECH': 'init'}\n        },\n        appointment: {\n            initial: \"who\",\n            on: {\n                MAXSPEECH: [ \n                {cond: (context) => context.counter === 3,\n                target: 'disappointment'},\n                {target: 'maxspeech',\n                actions: assign((context) => { tempCount++; return { counter: tempCount } })}, // tempCount is my var and counter is kept in context\n                ]\n            },\n\n            states:{\n                hist: { type : 'history'},\n                who: {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}), \n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                                    // cancel('maxsp'), \n                            target: \"day\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            // ...helping(\"You can say John or Patricia\"),\n                            // target: 'hist' // If I go to stop, how do I come back here? WITH HISTORY!!\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                    },\n                    ...promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You can say John, Patricia, vladislav, and so on\")\n                },\n                day: {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}), \n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                                    // cancel('maxsp')],\n                            target: \"wholeDay\"\n        \n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        {   \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. ${context.person}. On which day is your meeting?`\n                        })), \n                        \"Sorry, when?\", \n                        \"You can say on Monday, on Tuesday, on Wednesday, and so on\")\n                },\n                wholeDay:{\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"final1\"\n        \n                        }, {\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"time\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        {   cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take the whole day?`\n                    })),\"Sorry, yes or no?\",\n                    \"You should answer yes or no\"\n                    ),\n                },\n                final1:{\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"final\"\n        \n                        }, {\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"who\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                })), \"Sorry, yes or no?\",\n                    \"You should answer yes if it will take the whole day or no otherwise\"\n                    ),\n                },\n                time: {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}), \n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                                    //  cancel('maxsp'),],\n                            target: \"final2\"\n        \n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK. What time is your meeting?`\n                })), \"Sorry, could you repeat that?\",\n                    \"You can say at ten, at eleven or at noon\"\n                    ),\n                },\n                final2: {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"final\"\n        \n                        }, {\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"who\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n                    \"Sorry, yes or no?\",\n                    \"You should say yes or no\"\n                    ),\n                },\n                final:\n                {\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({ \n                                type: \"SPEAK\",\n                                value: `Your appointment has been created.`\n                            })),\n                        }\n                    }\n                }\n            }\n        }   \n    } // final closing, do not touch!!!!\n})"]},"metadata":{},"sourceType":"module"}