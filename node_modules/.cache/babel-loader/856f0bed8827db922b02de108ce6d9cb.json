{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, send, actions } from \"xstate\";\nconst cancel = actions.cancel;\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAskAndNomatch(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAX', {\n          delay: 5000,\n          id: 'noMax'\n        })]\n      },\n      nomatch: {\n        entry: say(\"Sorry I didn't catch that\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      }\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Peter\": {\n    person: \"Peter Pan\"\n  },\n  \"Emma\": {\n    person: \"Emma Watson\"\n  },\n  \"Greta\": {\n    person: \"Greta Thunberg\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 4\": {\n    time: \"4:00\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at five\": {\n    time: \"5:00\"\n  }\n};\nconst polar_grammar = {\n  \"yes\": {\n    yes_no: true\n  },\n  \"yep\": {\n    yes_no: true\n  },\n  \"indeed\": {\n    yes_no: true\n  },\n  \"of course\": {\n    yes_no: true\n  },\n  \"yes please\": {\n    yes_no: true\n  },\n  \"no\": {\n    yes_no: false\n  },\n  \"nope\": {\n    yes_no: false\n  },\n  \"no way\": {\n    yes_no: false\n  },\n  \"absolutely not\": {\n    yes_no: false\n  },\n  \"not at all\": {\n    yes_no: false\n  }\n};\nlet contador = 0; //counter\n\nexport const dmImproved = {\n  initial: 'welcome',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"askAppointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    askAppointment: {\n      initial: 'who',\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            return {\n              counter: 0\n            };\n          }) //not used but I needed sth in here I think\n\n        }\n      },\n      states: {\n        hist: {\n          type: \"history\",\n          history: \"deep\"\n        },\n        who: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.helper_who\"\n            }, {\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }), cancel('noMax')],\n              target: \"day\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAX: [{\n              cond: () => contador++ <= 2,\n              target: '#root.dm.appointment.max'\n            }, {\n              target: '#root.dm.appointment.maxFinal'\n            }]\n          }\n        }, promptAndAskAndNomatch(\"Who are you meeting with?\")),\n        day: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.helper_day\"\n            }, {\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }), cancel('noMax')],\n              target: \"whole_day\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAX: [{\n              cond: () => contador++ <= 2,\n              target: '#root.dm.appointment.max'\n            }, {\n              target: '#root.dm.appointment.maxFinal'\n            }]\n          }\n        }, promptAndAskAndNomatch(\"OK. On which day is your meeting?\")),\n        whole_day: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.helper_whole_day\"\n            }, {\n              cond: context => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === true : false,\n              actions: [cancel('noMax')],\n              target: \"confirmation_whole_day\"\n            }, {\n              cond: context => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === false : false,\n              actions: [cancel('noMax')],\n              target: \"time\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAX: [{\n              cond: () => contador++ <= 2,\n              target: '#root.dm.appointment.max'\n            }, {\n              target: '#root.dm.appointment.maxFinal'\n            }]\n          }\n        }, promptAndAskAndNomatch(\"OK. Will your meeting take the whole day?\")),\n        time: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.helper_time\"\n            }, {\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }), cancel('noMax')],\n              target: \"confirmation_with_time\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAX: [{\n              cond: () => contador++ <= 2,\n              target: '#root.dm.appointment.max'\n            }, {\n              target: '#root.dm.appointment.maxFinal'\n            }]\n          }\n        }, promptAndAskAndNomatch(\"OK. At what time is your meeting?\")),\n        confirmation_whole_day: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.helper_confs\"\n            }, {\n              cond: context => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === true : false,\n              actions: [cancel('noMax')],\n              target: \"appointment_created\"\n            }, {\n              cond: context => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === false : false,\n              actions: [cancel('noMax')],\n              target: \"who\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAX: [{\n              cond: () => contador++ <= 2,\n              target: '#root.dm.appointment.max'\n            }, {\n              target: '#root.dm.appointment.maxFinal'\n            }]\n          }\n        }, promptAndAskAndNomatch(\"OK. Do you want me to create an appointment for the whole day?\")),\n        confirmation_with_time: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.helper_confs\"\n            }, {\n              cond: context => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === true : false,\n              actions: [cancel('noMax')],\n              target: \"appointment_created\"\n            }, {\n              cond: context => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === false : false,\n              actions: [cancel('noMax')],\n              target: \"who\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAX: [{\n              cond: () => contador++ <= 2,\n              target: '#root.dm.appointment.max'\n            }, {\n              target: '#root.dm.appointment.maxFinal'\n            }]\n          }\n        }, promptAndAskAndNomatch(\"OK. Do you want me to create this appointment?\")),\n        appointment_created: {\n          initial: \"prompt\",\n          states: {\n            prompt: {\n              entry: say(\"Your appointment has been created!\")\n            }\n          }\n        }\n      }\n    },\n    max: {\n      entry: say(\"Sorry, I didn't hear anything\"),\n      on: {\n        \"ENDSPEECH\": {\n          target: '#root.dm.appointment.askAppointment.hist'\n        }\n      }\n    },\n    maxFinal: {\n      entry: say(\"Alright, since you don't wanna talk to me I'm gonna go to sleep\"),\n      always: '#root.dm.init'\n    },\n    // different reprompts for help\n    helper_who: {\n      entry: say(\"I need to know what person you'll be meeting. For example, you could say Peter... so who are you meeting with?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'\n      }\n    },\n    helper_day: {\n      entry: say(\"I'm looking for a day of the week here. For example, you could say on Wednesday... so on which day is your meeting?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'\n      }\n    },\n    helper_whole_day: {\n      entry: say(\"I'm asking if you will spend an entire day at the meeting. Your answer could be yes or no... so will it take the whole day?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'\n      }\n    },\n    helper_time: {\n      entry: say(\"I'm looking for a time to set your meeting. For example, you could say at ten... so at what time is your meeting?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'\n      }\n    },\n    helper_confs: {\n      entry: say(\"I'm making sure if I got the information correct. If I got it right, you can say yes... so do you want me to create the appointment?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointmentPlus2.ts"],"names":["assign","send","actions","cancel","say","text","_context","type","value","listen","promptAndAskAndNomatch","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","nomatch","grammar","person","day","time","polar_grammar","yes_no","contador","dmImproved","init","CLICK","welcome","askAppointment","RECOGNISED","context","counter","hist","history","who","cond","recResult","target","MAX","whole_day","confirmation_whole_day","confirmation_with_time","appointment_created","max","maxFinal","always","helper_who","helper_day","helper_whole_day","helper_time","helper_confs"],"mappings":";AAAA,SAAiBA,MAAjB,EAAyBC,IAAzB,EAA+BC,OAA/B,QAA6D,QAA7D;MACOC,M,GAAUD,O,CAAVC,M;AAEP,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAyD;AAC5D,SAAOJ,IAAI,CAAEK,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;AAED,OAAO,SAASI,MAAT,GAAgD;AACnD,SAAOR,IAAI,CAAC,QAAD,CAAX;AACH;;AAED,SAASS,sBAAT,CAAgCC,MAAhC,EAA0F;AACtF,SAAQ;AACXC,IAAAA,OAAO,EAAE,QADE;AAEXC,IAAAA,MAAM,EAAE;AACGF,MAAAA,MAAM,EAAE;AAClBG,QAAAA,KAAK,EAAEV,GAAG,CAACO,MAAD,CADQ;AAElBI,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFc,OADX;AAKGC,MAAAA,GAAG,EAAE;AACfH,QAAAA,KAAK,EAAE,CAACb,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAC,KAAD,EAAQ;AAACiB,UAAAA,KAAK,EAAE,IAAR;AAAcC,UAAAA,EAAE,EAAE;AAAlB,SAAR,CAArB;AADQ,OALR;AAQGC,MAAAA,OAAO,EAAE;AACLN,QAAAA,KAAK,EAAEV,GAAG,CAAC,2BAAD,CADL;AAELW,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFC;AARZ;AAFG,GAAR;AAeH;;AAED,MAAMK,OAA8E,GAAG;AACnF,UAAQ;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAD2E;AAEnF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAF0E;AAGnF,UAAQ;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAH2E;AAInF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAJ0E;AAKnF,eAAa;AAAEC,IAAAA,GAAG,EAAE;AAAP,GALsE;AAMnF,gBAAc;AAAEA,IAAAA,GAAG,EAAE;AAAP,GANqE;AAOnF,kBAAgB;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAPmE;AAQnF,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GARoE;AASnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GATsE;AAUnF,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAVoE;AAWnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAXsE;AAYnF,WAAS;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAZ0E;AAanF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAb2E;AAcnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAd2E;AAenF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAf2E;AAgBnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhB2E;AAiBnF,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAjBwE,CAAvF;AAoBA,MAAMC,aAAwD,GAAG;AAC7D,SAAO;AAAEC,IAAAA,MAAM,EAAE;AAAV,GADsD;AAE7D,SAAO;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAFsD;AAG7D,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAHmD;AAI7D,eAAa;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAJgD;AAK7D,gBAAc;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAL+C;AAM7D,QAAM;AAAEA,IAAAA,MAAM,EAAE;AAAV,GANuD;AAO7D,UAAQ;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAPqD;AAQ7D,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GARmD;AAS7D,oBAAkB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAT2C;AAU7D,gBAAc;AAAEA,IAAAA,MAAM,EAAE;AAAV;AAV+C,CAAjE;AAaA,IAAIC,QAAQ,GAAG,CAAf,C,CAAkB;;AAElB,OAAO,MAAMC,UAAoD,GAAI;AACjEhB,EAAAA,OAAO,EAAE,SADwD;AAEjEC,EAAAA,MAAM,EAAE;AACJgB,IAAAA,IAAI,EAAE;AACFd,MAAAA,EAAE,EAAE;AACAe,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,OAAO,EAAE;AACLnB,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,EAAE,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAFC;AAGLH,MAAAA,MAAM,EAAE;AACJF,QAAAA,MAAM,EAAE;AAAEG,UAAAA,KAAK,EAAEV,GAAG,CAAC,6BAAD;AAAZ;AADJ;AAHH,KANL;AAaJ4B,IAAAA,cAAc,EAAE;AAChBpB,MAAAA,OAAO,EAAE,KADO;AAEZG,MAAAA,EAAE,EAAE;AACAkB,QAAAA,UAAU,EAAE;AACR/B,UAAAA,OAAO,EAAEF,MAAM,CAAEkC,OAAD,IAAa;AAAE,mBAAO;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAP;AAAsB,WAAtC,CADP,CAC+C;;AAD/C;AADZ,OAFQ;AAOhBtB,MAAAA,MAAM,EAAE;AACJuB,QAAAA,IAAI,EAAE;AAAE7B,UAAAA,IAAI,EAAE,SAAR;AAAmB8B,UAAAA,OAAO,EAAE;AAA5B,SADF;AAERC,QAAAA,GAAG;AACCvB,UAAAA,EAAE,EAAE;AACAkB,YAAAA,UAAU,EAAE,CACR;AAAEM,cAAAA,IAAI,EAAGL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsB,MAA3C;AAAmDC,cAAAA,MAAM,EAAE;AAA3D,aADQ,EAER;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAa,aAAab,OAAO,CAACa,OAAO,CAACM,SAAT,CAAP,IAA8B,EAA3C,CAArB;AACAtC,cAAAA,OAAO,EAAE,CAACF,MAAM,CAAEkC,OAAD,IAAa;AAAE,uBAAO;AAAEZ,kBAAAA,MAAM,EAAED,OAAO,CAACa,OAAO,CAACM,SAAT,CAAP,CAA2BlB;AAArC,iBAAP;AAAsD,eAAtE,CAAP,EAAgFnB,MAAM,CAAC,OAAD,CAAtF,CADT;AAEAsC,cAAAA,MAAM,EAAE;AAFR,aAFQ,EAMZ;AAAEA,cAAAA,MAAM,EAAE,UAAV;AACIvC,cAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AADnB,aANY,CADZ;AASJuC,YAAAA,GAAG,EACC,CAAC;AAACH,cAAAA,IAAI,EAAE,MAAOZ,QAAQ,EAAT,IAAgB,CAA7B;AAAgCc,cAAAA,MAAM,EAAE;AAAxC,aAAD,EACA;AAACA,cAAAA,MAAM,EAAE;AAAT,aADA;AAVA;AADL,WAcI/B,sBAAsB,CAAC,2BAAD,CAd1B,CAFK;AAkBRa,QAAAA,GAAG;AACCR,UAAAA,EAAE,EAAE;AACAkB,YAAAA,UAAU,EAAE,CACR;AAAEM,cAAAA,IAAI,EAAGL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsB,MAA3C;AAAmDC,cAAAA,MAAM,EAAE;AAA3D,aADQ,EAER;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAa,UAAUb,OAAO,CAACa,OAAO,CAACM,SAAT,CAAP,IAA8B,EAAxC,CAArB;AACAtC,cAAAA,OAAO,EAAE,CAACF,MAAM,CAAEkC,OAAD,IAAa;AAAE,uBAAO;AAAEX,kBAAAA,GAAG,EAAEF,OAAO,CAACa,OAAO,CAACM,SAAT,CAAP,CAA2BjB;AAAlC,iBAAP;AAAgD,eAAhE,CAAP,EAA0EpB,MAAM,CAAC,OAAD,CAAhF,CADT;AAEAsC,cAAAA,MAAM,EAAE;AAFR,aAFQ,EAKR;AAAEA,cAAAA,MAAM,EAAE,UAAV;AAAsBvC,cAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAArC,aALQ,CADZ;AAOJuC,YAAAA,GAAG,EACC,CAAC;AAACH,cAAAA,IAAI,EAAE,MAAOZ,QAAQ,EAAT,IAAgB,CAA7B;AAAgCc,cAAAA,MAAM,EAAE;AAAxC,aAAD,EACA;AAACA,cAAAA,MAAM,EAAE;AAAT,aADA;AARA;AADL,WAYI/B,sBAAsB,qCAZ1B,CAlBK;AAgCRiC,QAAAA,SAAS;AACL5B,UAAAA,EAAE,EAAE;AACAkB,YAAAA,UAAU,EAAE,CACR;AAAEM,cAAAA,IAAI,EAAGL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsB,MAA3C;AAAmDC,cAAAA,MAAM,EAAE;AAA3D,aADQ,EAER;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAaT,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,GAAmCf,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,CAAiCd,MAAjC,KAA4C,IAA/E,GAAsF,KAA3G;AACIxB,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CADb;AAEIsC,cAAAA,MAAM,EAAE;AAFZ,aAFQ,EAKR;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAaT,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,GAAmCf,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,CAAiCd,MAAjC,KAA4C,KAA/E,GAAuF,KAA5G;AACIxB,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CADb;AAEIsC,cAAAA,MAAM,EAAE;AAFZ,aALQ,EAQZ;AAAEA,cAAAA,MAAM,EAAE,UAAV;AACIvC,cAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AADnB,aARY,CADZ;AAWJuC,YAAAA,GAAG,EACC,CAAC;AAACH,cAAAA,IAAI,EAAE,MAAOZ,QAAQ,EAAT,IAAgB,CAA7B;AAAgCc,cAAAA,MAAM,EAAE;AAAxC,aAAD,EACA;AAACA,cAAAA,MAAM,EAAE;AAAT,aADA;AAZA;AADC,WAgBF/B,sBAAsB,6CAhBpB,CAhCD;AAkDRc,QAAAA,IAAI;AACAT,UAAAA,EAAE,EAAE;AACAkB,YAAAA,UAAU,EAAE,CACR;AAAEM,cAAAA,IAAI,EAAGL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsB,MAA3C;AAAmDC,cAAAA,MAAM,EAAE;AAA3D,aADQ,EAER;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAa,WAAWb,OAAO,CAACa,OAAO,CAACM,SAAT,CAAP,IAA8B,EAAzC,CAArB;AACAtC,cAAAA,OAAO,EAAE,CAACF,MAAM,CAAEkC,OAAD,IAAa;AAAE,uBAAO;AAAEV,kBAAAA,IAAI,EAAEH,OAAO,CAACa,OAAO,CAACM,SAAT,CAAP,CAA2BhB;AAAnC,iBAAP;AAAkD,eAAlE,CAAP,EAA4ErB,MAAM,CAAC,OAAD,CAAlF,CADT;AAEAsC,cAAAA,MAAM,EAAE;AAFR,aAFQ,EAMZ;AAAEA,cAAAA,MAAM,EAAE,UAAV;AACIvC,cAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AADnB,aANY,CADZ;AASJuC,YAAAA,GAAG,EACC,CAAC;AAACH,cAAAA,IAAI,EAAE,MAAOZ,QAAQ,EAAT,IAAgB,CAA7B;AAAgCc,cAAAA,MAAM,EAAE;AAAxC,aAAD,EACA;AAACA,cAAAA,MAAM,EAAE;AAAT,aADA;AAVA;AADJ,WAcG/B,sBAAsB,qCAdzB,CAlDI;AAkERkC,QAAAA,sBAAsB;AAClB7B,UAAAA,EAAE,EAAE;AACAkB,YAAAA,UAAU,EAAE,CACR;AAAEM,cAAAA,IAAI,EAAGL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsB,MAA3C;AAAmDC,cAAAA,MAAM,EAAE;AAA3D,aADQ,EAER;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAaT,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,GAAmCf,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,CAAiCd,MAAjC,KAA4C,IAA/E,GAAsF,KAA3G;AACIxB,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CADb;AAEIsC,cAAAA,MAAM,EAAE;AAFZ,aAFQ,EAKR;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAaT,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,GAAmCf,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,CAAiCd,MAAjC,KAA4C,KAA/E,GAAuF,KAA5G;AACIxB,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CADb;AAEIsC,cAAAA,MAAM,EAAE;AAFZ,aALQ,EAQZ;AAAEA,cAAAA,MAAM,EAAE,UAAV;AACIvC,cAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AADnB,aARY,CADZ;AAWJuC,YAAAA,GAAG,EACC,CAAC;AAACH,cAAAA,IAAI,EAAE,MAAOZ,QAAQ,EAAT,IAAgB,CAA7B;AAAgCc,cAAAA,MAAM,EAAE;AAAxC,aAAD,EACA;AAACA,cAAAA,MAAM,EAAE;AAAT,aADA;AAZA;AADc,WAgBf/B,sBAAsB,kEAhBP,CAlEd;AAoFRmC,QAAAA,sBAAsB;AAClB9B,UAAAA,EAAE,EAAE;AACAkB,YAAAA,UAAU,EAAE,CACR;AAAEM,cAAAA,IAAI,EAAGL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsB,MAA3C;AAAmDC,cAAAA,MAAM,EAAE;AAA3D,aADQ,EAER;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAaT,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,GAAmCf,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,CAAiCd,MAAjC,KAA4C,IAA/E,GAAsF,KAA3G;AACIxB,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CADb;AAEIsC,cAAAA,MAAM,EAAE;AAFZ,aAFQ,EAKR;AAAEF,cAAAA,IAAI,EAAGL,OAAD,IAAaT,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,GAAmCf,aAAa,CAACS,OAAO,CAACM,SAAT,CAAb,CAAiCd,MAAjC,KAA4C,KAA/E,GAAuF,KAA5G;AACIxB,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CADb;AAEIsC,cAAAA,MAAM,EAAE;AAFZ,aALQ,EAQZ;AAAEA,cAAAA,MAAM,EAAE,UAAV;AACIvC,cAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AADnB,aARY,CADZ;AAWJuC,YAAAA,GAAG,EACC,CAAC;AAACH,cAAAA,IAAI,EAAE,MAAOZ,QAAQ,EAAT,IAAgB,CAA7B;AAAgCc,cAAAA,MAAM,EAAE;AAAxC,aAAD,EACA;AAACA,cAAAA,MAAM,EAAE;AAAT,aADA;AAZA;AADc,WAgBf/B,sBAAsB,kDAhBP,CApFd;AAsGRoC,QAAAA,mBAAmB,EAAE;AACjBlC,UAAAA,OAAO,EAAE,QADQ;AAEjBC,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,EAAE;AAAEG,cAAAA,KAAK,EAAEV,GAAG,CAAC,oCAAD;AAAZ;AADJ;AAFS;AAtGb;AAPQ,KAbZ;AAiIZ2C,IAAAA,GAAG,EAAE;AACDjC,MAAAA,KAAK,EAAEV,GAAG,CAAC,+BAAD,CADT;AAEDW,MAAAA,EAAE,EAAE;AAAE,qBACF;AAAC0B,UAAAA,MAAM,EAAE;AAAT;AADA;AAFH,KAjIO;AAsIZO,IAAAA,QAAQ,EAAE;AACNlC,MAAAA,KAAK,EAAEV,GAAG,CAAC,iEAAD,CADJ;AAEN6C,MAAAA,MAAM,EAAE;AAFF,KAtIE;AA0IZ;AACAC,IAAAA,UAAU,EAAE;AACRpC,MAAAA,KAAK,EAAEV,GAAG,CAAC,gHAAD,CADF;AAERW,MAAAA,EAAE,EAAE;AAAE,qBAAa;AAAf;AAFI,KA3IA;AA+IZoC,IAAAA,UAAU,EAAE;AACRrC,MAAAA,KAAK,EAAEV,GAAG,CAAC,qHAAD,CADF;AAERW,MAAAA,EAAE,EAAE;AAAE,qBAAa;AAAf;AAFI,KA/IA;AAmJZqC,IAAAA,gBAAgB,EAAE;AACdtC,MAAAA,KAAK,EAAEV,GAAG,CAAC,6HAAD,CADI;AAEdW,MAAAA,EAAE,EAAE;AAAE,qBAAa;AAAf;AAFU,KAnJN;AAuJZsC,IAAAA,WAAW,EAAE;AACTvC,MAAAA,KAAK,EAAEV,GAAG,CAAC,mHAAD,CADD;AAETW,MAAAA,EAAE,EAAE;AAAE,qBAAa;AAAf;AAFK,KAvJD;AA2JZuC,IAAAA,YAAY,EAAE;AACVxC,MAAAA,KAAK,EAAEV,GAAG,CAAC,sIAAD,CADA;AAEVW,MAAAA,EAAE,EAAE;AAAE,qBAAa;AAAf;AAFM;AA3JF;AAFyD,CAA9D","sourcesContent":["import { Action, assign, send, actions, MachineConfig } from \"xstate\";\nconst {cancel} = actions\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAskAndNomatch(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: [send('LISTEN'), send('MAX', {delay: 5000, id: 'noMax'})]\n            },\n            nomatch: {\n                entry: say(\"Sorry I didn't catch that\"),\n                on: { ENDSPEECH: \"prompt\" }\n            }\n\t}})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Peter\": { person: \"Peter Pan\" },\n    \"Emma\": { person: \"Emma Watson\" },\n    \"Greta\": { person: \"Greta Thunberg\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 4\": { time: \"4:00\" },\n    \"at 5\": { time: \"5:00\" },\n    \"at five\": { time: \"5:00\" }\n}\n\nconst polar_grammar: { [index: string]: { yes_no?: boolean } } = {\n    \"yes\": { yes_no: true },\n    \"yep\": { yes_no: true },\n    \"indeed\": { yes_no: true },\n    \"of course\": { yes_no: true },\n    \"yes please\": { yes_no: true },\n    \"no\": { yes_no: false },\n    \"nope\": { yes_no: false },\n    \"no way\": { yes_no: false },\n    \"absolutely not\": { yes_no: false },\n    \"not at all\": { yes_no: false },\n}\n\nlet contador = 0; //counter\n\nexport const dmImproved: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"askAppointment\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        askAppointment: {\n        initial: 'who',\n            on: {\n                RECOGNISED: {\n                    actions: assign((context) => { return { counter: 0 }}) //not used but I needed sth in here I think\n                },\n            },\n        states: {\n            hist: { type: \"history\", history: \"deep\" },\n        who: {\n            on: {\n                RECOGNISED: [\n                    { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.helper_who\" },\n                    { cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }), cancel('noMax')],\n                    target: \"day\"\n                },\n                { target: \".nomatch\",\n                    actions: cancel('noMax') }],\n            MAX:  \n                [{cond: () => (contador++) <= 2, target: '#root.dm.appointment.max'},\n                {target: '#root.dm.appointment.maxFinal'}]\n            },\n            ...promptAndAskAndNomatch(\"Who are you meeting with?\"),\n        },\n        day: {\n            on: {\n                RECOGNISED: [\n                    { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.helper_day\" },\n                    { cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { day: grammar[context.recResult].day } }), cancel('noMax')],\n                    target: \"whole_day\" },\n                    { target: \".nomatch\", actions: cancel('noMax') }],\n            MAX:  \n                [{cond: () => (contador++) <= 2, target: '#root.dm.appointment.max'},\n                {target: '#root.dm.appointment.maxFinal'}]\n            },\n            ...promptAndAskAndNomatch(`OK. On which day is your meeting?`),\n        },\n        whole_day: {\n            on: {\n                RECOGNISED: [\n                    { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.helper_whole_day\" },\n                    { cond: (context) => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === true : false,\n                        actions: [cancel('noMax')],\n                        target: \"confirmation_whole_day\"},\n                    { cond: (context) => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === false : false,\n                        actions: [cancel('noMax')],\n                        target: \"time\"},\n                { target: \".nomatch\",\n                    actions: cancel('noMax') }],\n            MAX:  \n                [{cond: () => (contador++) <= 2, target: '#root.dm.appointment.max'},\n                {target: '#root.dm.appointment.maxFinal'}]\n            },\n            ...promptAndAskAndNomatch(`OK. Will your meeting take the whole day?`),\n        },\n        time: {\n            on: {\n                RECOGNISED: [\n                    { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.helper_time\" },\n                    { cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { time: grammar[context.recResult].time } }), cancel('noMax')],\n                    target: \"confirmation_with_time\"\n                },\n                { target: \".nomatch\",\n                    actions: cancel('noMax') }],\n            MAX:  \n                [{cond: () => (contador++) <= 2, target: '#root.dm.appointment.max'},\n                {target: '#root.dm.appointment.maxFinal'}]\n            },\n            ...promptAndAskAndNomatch(`OK. At what time is your meeting?`),\n        },\n        confirmation_whole_day: {\n            on: {\n                RECOGNISED: [\n                    { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.helper_confs\" },\n                    { cond: (context) => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === true : false,\n                        actions: [cancel('noMax')],\n                        target: \"appointment_created\"},\n                    { cond: (context) => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === false : false,\n                        actions: [cancel('noMax')],\n                        target: \"who\"},\n                { target: \".nomatch\",\n                    actions: cancel('noMax') }],\n            MAX:  \n                [{cond: () => (contador++) <= 2, target: '#root.dm.appointment.max'},\n                {target: '#root.dm.appointment.maxFinal'}]\n            },\n            ...promptAndAskAndNomatch(`OK. Do you want me to create an appointment for the whole day?`),\n        },\n        confirmation_with_time: {\n            on: {\n                RECOGNISED: [\n                    { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.helper_confs\" },\n                    { cond: (context) => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === true : false,\n                        actions: [cancel('noMax')],\n                        target: \"appointment_created\"},\n                    { cond: (context) => polar_grammar[context.recResult] ? polar_grammar[context.recResult].yes_no === false : false,\n                        actions: [cancel('noMax')],\n                        target: \"who\"},\n                { target: \".nomatch\",\n                    actions: cancel('noMax') }],\n            MAX:  \n                [{cond: () => (contador++) <= 2, target: '#root.dm.appointment.max'},\n                {target: '#root.dm.appointment.maxFinal'}]\n            },\n            ...promptAndAskAndNomatch(`OK. Do you want me to create this appointment?`),\n        },\n        appointment_created: {\n            initial: \"prompt\",\n            states: {\n                prompt: { entry: say(\"Your appointment has been created!\") }\n            }\n        },\n}},\nmax: {\n    entry: say(\"Sorry, I didn't hear anything\"),\n    on: { \"ENDSPEECH\": \n        {target: '#root.dm.appointment.askAppointment.hist'}\n}},\nmaxFinal: {\n    entry: say(\"Alright, since you don't wanna talk to me I'm gonna go to sleep\"),\n    always: '#root.dm.init'\n}, \n// different reprompts for help\nhelper_who: {\n    entry: say(\"I need to know what person you'll be meeting. For example, you could say Peter... so who are you meeting with?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'}\n},\nhelper_day: {\n    entry: say(\"I'm looking for a day of the week here. For example, you could say on Wednesday... so on which day is your meeting?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'}\n},\nhelper_whole_day: {\n    entry: say(\"I'm asking if you will spend an entire day at the meeting. Your answer could be yes or no... so will it take the whole day?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'}\n},\nhelper_time: {\n    entry: say(\"I'm looking for a time to set your meeting. For example, you could say at ten... so at what time is your meeting?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'}\n},\nhelper_confs: {\n    entry: say(\"I'm making sure if I got the information correct. If I got it right, you can say yes... so do you want me to create the appointment?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.askAppointment.hist'}\n},\n}})"]},"metadata":{},"sourceType":"module"}