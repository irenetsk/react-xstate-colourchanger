{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport \"./styles.scss\"; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/SmartHome';\nconst gram = loadGrammar(grammar);\nconst input = \"please open the door\";\nconst prs = parse(input.split(/\\s+/), gram);\nconst result = prs.resultsForRule(gram.$root)[0];\nconsole.log(result); // const sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n//     type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n// }))\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: \"init\",\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What would you like to do?\"))\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","say","text","_context","type","value","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","context","option","recResult"],"mappings":";AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;AACA,OAAO,eAAP,C,CAEA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,MAAMC,IAAI,GAAGH,WAAW,CAACE,OAAD,CAAxB;AACA,MAAME,KAAK,GAAG,sBAAd;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACG,KAAK,CAACE,KAAN,CAAY,KAAZ,CAAD,EAAqBH,IAArB,CAAjB;AACA,MAAMI,MAAM,GAAGF,GAAG,CAACG,cAAJ,CAAmBL,IAAI,CAACM,KAAxB,EAA+B,CAA/B,CAAf;AAEAC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,E,CAEA;AACA;AACA;;AAEA,SAASK,GAAT,CAAaC,IAAb,EAAyD;AACrD,SAAOf,IAAI,CAAEgB,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASI,YAAT,CAAsBC,MAAtB,EAAgF;AAC5E,SAAQ;AACJC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAET,GAAG,CAACM,MAAD,CADN;AAEJI,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAKJC,MAAAA,GAAG,EAAE;AACDH,QAAAA,KAAK,EAAEvB,IAAI,CAAC,QAAD;AADV;AALD;AAFJ,GAAR;AAYH;;AAGD,OAAO,MAAM2B,SAAmD,GAAI;AAEhEN,EAAAA,OAAO,EAAE,MAFuD;AAGhEC,EAAAA,MAAM,EAAE;AACJM,IAAAA,IAAI,EAAE;AACFJ,MAAAA,EAAE,EAAE;AACAK,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAOJC,IAAAA,OAAO;AACHN,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE;AACRC,UAAAA,MAAM,EAAE,MADA;AAERC,UAAAA,OAAO,EAAEhC,MAAM,CAAEiC,OAAD,IAAa;AAAE,mBAAO;AAAEC,cAAAA,MAAM,EAAED,OAAO,CAACE;AAAlB,aAAP;AAAsC,WAAtD;AAFP;AADZ;AADD,OAOQjB,YAAY,CAAC,4BAAD,CAPpB;AAPH;AAHwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/SmartHome'\n\nconst gram = loadGrammar(grammar)\nconst input = \"please open the door\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\n\nconsole.log(result)\n\n// const sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n//     type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n// }))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"init\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do?\")\n        }\n    }})"]},"metadata":{},"sourceType":"module"}