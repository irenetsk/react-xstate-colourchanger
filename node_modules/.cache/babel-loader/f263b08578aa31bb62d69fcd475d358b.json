{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { actions, assign } from \"xstate\";\nimport \"./styles.scss\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Curie\"\n  },\n  \"George\": {\n    person: \"George Smith\"\n  },\n  \"Axel\": {\n    person: \"Axel Rose\"\n  },\n  \"Sebastian\": {\n    person: \"Sebastian Bach\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  }\n};\nconst grammar2 = {\n  \"yes of course\": true,\n  \"sure\": true,\n  \"absolutely\": true,\n  \"yes\": true,\n  \"no way\": false,\n  \"no\": false\n};\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet count = 0;\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"S\"\n};\n\nfunction promptAndAsk1(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nfunction promptAndAsk(prompt, nomatch, help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: prompt,\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 4000,\n          id: 'timeout'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      },\n      help: {\n        entry: say(help),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: \"query\",\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk1(\"What would you like to do? Your options are appointment, to do item or timer\")),\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: 'menu',\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: 'todo',\n          cond: context => context.option === 'todo'\n        }, {\n          target: 'timer',\n          cond: context => context.option === 'timer'\n        }, {\n          target: 'appointment',\n          cond: context => context.option === 'appointment'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I understand.\"\n          }))\n        }\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create a timer\"\n          }))\n        }\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry I couldn't hear anything\"),\n      on: {\n        'ENDSPEECH': 'mainappointment.hist'\n      }\n    },\n    finalmaxspeech: {\n      entry: say(\"It appears you are not there anymore. Goodbye.\"),\n      on: {\n        'ENDSPEECH': 'init'\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"mainappointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    mainappointment: {\n      initial: 'who',\n      on: {\n        MAXSPEECH: [{\n          cond: context => context.counter == 3,\n          target: 'finalmaxspeech'\n        }, {\n          target: 'maxspeech',\n          actions: assign(context => {\n            count++;\n            return {\n              counter: count\n            };\n          })\n        }]\n      },\n      states: {\n        hist: {\n          type: 'history',\n          history: 'shallow'\n        },\n        who: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")),\n        day: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => 'day' in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: 'wholeday'\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK \".concat(context.person, \". On which day is your meeting?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")),\n        wholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"time\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmwholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK \".concat(context.day, \". Will your meeting take the whole day?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")),\n        time: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirmtime\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK \".concat(context.day, \". What time is your meeting?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")),\n        confirmwholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"who\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),\n        confirmtime: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"who\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n        })), \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")),\n        confirmed: {\n          initial: \"prompt\",\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      } //states 2 closes\n\n    } //MainAppointment closes   \n\n  }\n};\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointmentPlus2.ts"],"names":["actions","assign","send","cancel","say","text","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","count","commands","promptAndAsk1","prompt","initial","states","entry","on","ENDSPEECH","ask","promptAndAsk","nomatch","help","delay","id","dmMachine","init","CLICK","welcome","RECOGNISED","target","context","option","recResult","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","maxspeech","finalmaxspeech","appointment","mainappointment","MAXSPEECH","counter","hist","history","who","wholeday","confirmwholeday","confirmtime","confirmed","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, Machine, Action, actions, assign } from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nconst { send, cancel } = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Curie\" },\n    \"George\": { person: \"George Smith\" },\n    \"Axel\": { person: \"Axel Rose\" },\n    \"Sebastian\": { person: \"Sebastian Bach\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n    \"at 5\": { time: \"5:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet count = 0;\nconst commands = { \"stop\":\"S\", \"help\":\"S\" };\n\nfunction promptAndAsk1(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: string, help:string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH: 'ask'}\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 4000, id: 'timeout'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n            help: {\n                entry: say(help),\n                on: { ENDSPEECH: 'ask' }\n            }\n        }})}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk1(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n                }\n            }       \n        },\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        maxspeech : {\n            entry: say(\"Sorry I couldn't hear anything\"),\n            on: {'ENDSPEECH': 'mainappointment.hist'}\n        },\n\n        finalmaxspeech: {\n            entry: say(\"It appears you are not there anymore. Goodbye.\"),\n            on: {'ENDSPEECH': 'init'}\n        },\n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"mainappointment\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        \n        mainappointment: {\n            initial: 'who',\n            on: {\n                MAXSPEECH: [\n                    {cond: (context) => context.counter == 3, target: 'finalmaxspeech'},\n                    {target: 'maxspeech', actions: assign((context) => { count++; return { counter: count } })}\n                ]\n            },\n\n            states: {            \n                hist: { type: 'history', history: 'shallow' },\n\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                            target: \"day\" },\n                            { cond: (context) => (context.recResult in commands),\n                            target: \".help\" },\n                            { target: \".nomatch\" }\n                        ]\n                    },\n                ...promptAndAsk (say (\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You need to tell me which person you will be meeting so that I can set the appointment\")\n                },    \n\n                day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => 'day' in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                            target: 'wholeday'},\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK ${context.person}. On which day is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what day your meeting will take place so that I can put it on your calendar\")\n                },\n\n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => (grammar2[context.recResult] === b), target: \"time\" },\n                            { cond: (context) => (grammar2[context.recResult] === a), target: \"confirmwholeday\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }               \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK ${context.day}. Will your meeting take the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking whether your meeting will take the whole day so that I clear your schedule\")\n                },\n\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                            target: \"confirmtime\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK ${context.day}. What time is your meeting?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking what time you would like to schedule your meeting\")\n                },    \n\n                confirmwholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" } \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },   \n\n                confirmtime: {\n                    initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (grammar2[context.recResult] === b), target: \"who\" },\n                            {cond: (context) => (grammar2[context.recResult] === a), target: \"confirmed\" },\n                            { cond: (context) => (context.recResult in commands), target: \".help\" },\n                            { target: \".nomatch\" }                         \n                        ]\n                    },\n                    ...promptAndAsk (send((context) => ({ type: \"SPEAK\", value: `OK. Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})), \n                    \"Sorry, could you repeat that?\", \"I am asking if you confirm the appointment I have created so I can put it on your schedule\")\n                },  \n\n                confirmed: {\n                    initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!` }))\n                        },\n                    }\n                }                 \n    } //states 2 closes\n    }, //MainAppointment closes   \n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n"]},"metadata":{},"sourceType":"module"}