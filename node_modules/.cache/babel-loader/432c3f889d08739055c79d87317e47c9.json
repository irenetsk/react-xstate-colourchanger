{"ast":null,"code":"import _objectSpread from \"/Users/irene/Desktop/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, actions, assign } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(\"Could you repeat that please?\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      }\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Curie\"\n  },\n  \"George\": {\n    person: \"George Smith\"\n  },\n  \"Axel\": {\n    person: \"Axel Rose\"\n  },\n  \"Sebastian\": {\n    person: \"Sebastian Bach\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  }\n};\nconst grammar2 = {\n  \"yes of course\": true,\n  \"sure\": true,\n  \"absolutely\": true,\n  \"yes\": true,\n  \"no way\": false,\n  \"no\": false\n};\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet counter = 0;\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"MainAppointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    MainAppointment: {\n      initial: 'who',\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            return {\n              counter: 0\n            };\n          })\n        }\n      },\n      states: {\n        hist: {\n          type: \"history\",\n          history: 'deep'\n        },\n        who: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              cond: context => context.recResult === \"help\",\n              target: \"root.dm.appointment.who_help\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('noMax')\n            }],\n            MAXSPEECH: [{\n              cond: () => counter++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.maxspeech_goodbye'\n            }]\n          }\n        }, promptAndAsk(\"Who are you meeting with?\")),\n        day: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => 'day' in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }), cancel('maxsp')],\n              target: 'wholeday'\n            }, {\n              cond: context => context.recResult === 'help',\n              target: 'root.dm.appointment.day_help'\n            }, {\n              target: \".nomatch\",\n              actions: cancel('maxsp')\n            }],\n            MAXSPEECH: [{\n              cond: () => counter++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.maxspeech_goodbye'\n            }]\n          }\n        }, promptAndAsk(\"OK. On which day is your meeting?\")),\n        wholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"time\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmwholeday\"\n            }, {\n              cond: context => context.recResult === \"help\",\n              target: \"#root.dm.appointment.wholeday_help\"\n            }, {\n              target: \".nomatch\",\n              actions: cancel('maxsp')\n            }],\n            MAXSPEECH: [{\n              cond: () => counter++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.maxspeech_goodbye'\n            }]\n          }\n        }, promptAndAsk(\"OK. Will your meeting take the whole day?\")),\n        time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirmtime\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.day, \". What time is your meeting?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry I don't know that\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirmwholeday: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"init\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirmtime: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => grammar2[context.recResult] === b,\n              target: \"who\"\n            }, {\n              cond: context => grammar2[context.recResult] === a,\n              target: \"confirmed\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirmed: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"init\"\n          },\n          states: {\n            prompt: {\n              entry: send(() => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      } //states 2 closes\n\n    },\n    //MainAppointment closes\n    // HELP REDIRECTS FOR ALL STATES\n    who_help: {\n      entry: say(\"I need to know what person you'll be meeting. For example, you could say Peter... so who are you meeting with?\"),\n      on: {\n        \"ENDSPEECH\": 'MainAppointment.hist'\n      }\n    },\n    day_help: {\n      entry: say(\"I'm looking for a day of the week here. For example, you could say on Wednesday... so on which day is your meeting?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'\n      }\n    },\n    wholeday_help: {\n      entry: say(\"I'm asking if you will spend an entire day at the meeting. Your answer could be yes or no... so will it take the whole day?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'\n      }\n    },\n    time_help: {\n      entry: say(\"I'm looking for a time to set your meeting. For example, you could say at ten... so at what time is your meeting?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'\n      }\n    },\n    confirmwholeday_help: {\n      entry: say(\"I'm making sure if I got the information correct. If I got it right, you can say yes... so do you want me to create the appointment?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'\n      }\n    },\n    confirmtime_help: {\n      entry: say(\"I'm making sure if I got the information correct. If I got it right, you can say yes... so do you want me to create the appointment?\"),\n      on: {\n        \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'\n      }\n    },\n    // MAXSPEECH VERSIONS\n    maxspeech: {\n      entry: say(\"Sorry what did you say?\"),\n      on: {\n        \"ENDSPEECH\": 'MainAppointment.hist'\n      }\n    },\n    maxspeech_goodbye: {\n      entry: say(\"OK goodbye\"),\n      always: '#root.dm.init'\n    }\n  }\n};","map":{"version":3,"sources":["/Users/irene/Desktop/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["send","actions","assign","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","nomatch","grammar","person","day","time","grammar2","a","b","counter","dmMachine","init","CLICK","welcome","MainAppointment","RECOGNISED","context","hist","history","who","cond","recResult","target","MAXSPEECH","wholeday","confirmwholeday","confirmtime","confirmed","who_help","day_help","wholeday_help","time_help","confirmwholeday_help","confirmtime_help","maxspeech","maxspeech_goodbye","always"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, actions, assign } from \"xstate\";\nimport \"./styles.scss\";\nconst {cancel} = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [ send('LISTEN'), send('MAXSPEECH', { delay: 5000, id: 'maxsp' })]\n            },\n            nomatch: {\n                entry: say(\"Could you repeat that please?\"),\n                on: { ENDSPEECH: \"prompt\" }\n            }}})}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Curie\" },\n    \"George\": { person: \"George Smith\" },\n    \"Axel\": { person: \"Axel Rose\" },\n    \"Sebastian\": { person: \"Sebastian Bach\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Saturday\": { day: \"Saturday\" },\n\t\"on Sunday\": { day: \"Sunday\" },\n\n\t\"at 5\": { time: \"5:00\" },\n\t\"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"];\nlet b = grammar2[\"no\"];\nlet counter = 0;\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"MainAppointment\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        MainAppointment: {\n        initial: 'who',\n            on: {\n                RECOGNISED: {\n                    actions: assign((context) => { return {counter: 0} })\n                },\n            },\n        states: {\n            hist: { type: \"history\", history: 'deep' },\n            who: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        { cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { person: grammar[context.recResult].person } }), \n                        target: \"day\" },\n                        { cond: (context) => context.recResult === \"help\", target: \"root.dm.appointment.who_help\" },\n                        { target: \".nomatch\", actions: cancel('noMax') }\n                    ],\n                    MAXSPEECH:  [{ cond: () => (counter++) <= 2, target: '#root.dm.appointment.maxspeech' },\n                    { target: '#root.dm.appointment.maxspeech_goodbye' }]\n                },\n                ...promptAndAsk(\"Who are you meeting with?\"),\n            },\n\n\n            day: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        { cond: (context) => 'day' in (grammar[context.recResult] || {}),\n                        actions: [assign((context) => { return { day: grammar[context.recResult].day } }), cancel('maxsp')],\n                        target: 'wholeday'},\n                        { cond: (context) => context.recResult === 'help', target: 'root.dm.appointment.day_help' },\n                        { target: \".nomatch\", actions: cancel('maxsp') }                \n                    ],\n                    MAXSPEECH:  [{ cond: () => (counter++) <= 2, target: '#root.dm.appointment.maxspeech' },\n                    {target: '#root.dm.appointment.maxspeech_goodbye'}]\n                },\n                ...promptAndAsk(`OK. On which day is your meeting?`),\n            },\n\n\n            wholeday: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                        {cond: (context) => (grammar2[context.recResult] === b),\n                        target: \"time\" },\n                        {cond: (context) => (grammar2[context.recResult] === a),\n                        target: \"confirmwholeday\" },\n                        { cond: (context) => context.recResult === \"help\", target: \"#root.dm.appointment.wholeday_help\" },\n                        { target: \".nomatch\", actions: cancel('maxsp') }                \n                    ],\n                    MAXSPEECH:  \n                    [{cond: () => (counter++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                    {target: '#root.dm.appointment.maxspeech_goodbye'}]\n                },\n                ...promptAndAsk(`OK. Will your meeting take the whole day?`),\n            },\n\n\n\n            time: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                        target: \"confirmtime\"\n\n                    },\n                    { target: \".nomatch\" }]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. ${context.day}. What time is your meeting?`,\n                        \n                        })),\n                on: { ENDSPEECH: \"ask\" }\n                    },\n            ask: {\n                entry: listen()\n                    },\n            nomatch: {\n                entry: say(\"Sorry I don't know that\"),\n            on: { ENDSPEECH: \"prompt\" }\n                    }\n                    }\n            },\n\n\n\n            confirmwholeday: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                        target: \"init\"\n                    },\n            {cond: (context) => (grammar2[context.recResult] === a),\n            target: \"confirmed\"\n            },\n                    { target: \".nomatch\" }]\n                },\n\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                        })),\n                on: { ENDSPEECH: \"ask\" }\n                    },\n            ask: {\n                entry: listen()\n                },\n            nomatch: {\n                entry: say(\"Sorry, I don't understand\"),\n            on: { ENDSPEECH: \"prompt\" }\n                }\n                    }\n        },\n        confirmtime: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"who\"\n                },\n        {cond: (context) => (grammar2[context.recResult] === a),\n        target: \"confirmed\"\n        },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n            },\n        nomatch: {\n            entry: say(\"Sorry, I don't understand\"),\n        on: { ENDSPEECH: \"prompt\" }\n            }\n                },\n            },\n        confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send(() => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!` }))\n                },\n            }\n        }\n} //states 2 closes\n}, //MainAppointment closes\n\n// HELP REDIRECTS FOR ALL STATES\nwho_help: {\n    entry: say(\"I need to know what person you'll be meeting. For example, you could say Peter... so who are you meeting with?\"),\n    on: { \"ENDSPEECH\": 'MainAppointment.hist'}\n},\nday_help: {\n    entry: say(\"I'm looking for a day of the week here. For example, you could say on Wednesday... so on which day is your meeting?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'}\n},\nwholeday_help: {\n    entry: say(\"I'm asking if you will spend an entire day at the meeting. Your answer could be yes or no... so will it take the whole day?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'}\n},\ntime_help: {\n    entry: say(\"I'm looking for a time to set your meeting. For example, you could say at ten... so at what time is your meeting?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'}\n},\nconfirmwholeday_help: {\n    entry: say(\"I'm making sure if I got the information correct. If I got it right, you can say yes... so do you want me to create the appointment?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'}\n},\nconfirmtime_help: {\n    entry: say(\"I'm making sure if I got the information correct. If I got it right, you can say yes... so do you want me to create the appointment?\"),\n    on: { \"ENDSPEECH\": '#root.dm.appointment.MainAppointment.hist'}\n},\n// MAXSPEECH VERSIONS\nmaxspeech: {\n    entry: say(\"Sorry what did you say?\"),\n    on: { \"ENDSPEECH\": 'MainAppointment.hist' }\n},\nmaxspeech_goodbye: {\n    entry: say(\"OK goodbye\"),\n    always: '#root.dm.init'\n}\n\n\n}})"]},"metadata":{},"sourceType":"module"}